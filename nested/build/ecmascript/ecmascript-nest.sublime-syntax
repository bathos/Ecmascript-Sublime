%YAML 1.2
---
name: Ecmascript nested syntax - Ecmascript
file_extensions:
  - js
  - jsx
  - es
  - es6
  - mjs
scope: source.js.nested.es
hidden: true
variables:
  MAT_word_or_any_one_char: \w+|\S
  PLA_anything: '(?=[\S\s])'
  ID_Continue: '{{ID_Start}}\p{Mn}\p{Mc}\p{Nd}\p{Pc}{{Other_ID_Continue}}'
  ID_Start: '\p{L}\p{Nl}{{Other_ID_Start}}'
  Other_ID_Continue: ··፩-፱᧚
  Other_ID_Start: ℘℮゛゜
  boxchars: '[─-╿▀-▟]+'
  whiteNoLine: '[\s&&[^\n\r]]+'
  keywordLanguage: >-
    break | case | catch | class | const | continue | debugger | default |
    delete | do | else | export | extends | finally | for | function | if |
    import | in | instanceof | let | new | return | super | switch | this |
    throw | try | typeof | var | void | while | with | yield
  keywordReserved: >-
    await | enum | implements | interface | package | private | protected |
    public
  keywordLiteral: false | null | true
  keywordOther: Infinity | NaN | undefined
  reservedWords: >-
    {{keywordLanguage}}| {{keywordReserved}}| {{keywordLiteral}}|
    {{keywordOther}}
  identifier: |-
    (?x)
      (?! (?:{{reservedWords}})
      [^\$_‍‍{{ID_Continue}}] )
      (?<![{{ID_Continue}}])
      {{identifierName}}
  identifierInitCap: '(?:\p{Lu}{{identifierPart}}){{idEnd}}'
  identifierInitCapStrict: |-
    (?x)
      (?! (?:{{reservedWords}})
      [^\$_‍‍{{ID_Continue}}] )
      (?<![{{ID_Continue}}])
      {{identifierInitCap}}
  identifierAllCaps: '(?:[\p{Lu}\d_]{2,}|\p{Lu}){{idEnd}}'
  identifierAllCapsStrict: |-
    (?x)
      (?! (?:{{reservedWords}})
      [^\$_‍‍{{ID_Continue}}] )
      (?<![{{ID_Continue}}])
      {{identifierAllCaps}}
  identifierName: '{{identifierStart}}{{identifierPart}}'
  identifierPart: '(?:\$(?!\{)|[_‍‍{{ID_Continue}}]|{{unicodeEscape}})*'
  identifierStart: '(?:\$(?!\{)|[_{{ID_Start}}]|{{unicodeEscape}})'
  allThreeIDs: '({{identifierAllCaps}})|({{identifierInitCap}})|({{identifier}})'
  unicodeEscape: '\\u(?:\h{4}|\{\h+\})'
  jsxComponentIdentifier: '{{identifierInitCapStrict}}'
  jsxElementIdentifier: '{{identifierName}}(?:-(?:{{identifierPart}})*)*'
  jsxNamespaceIdentifier: '({{identifierInitCapStrict}})(\.)'
  intrinsicConstructors: >-
    Array(?:Buffer)? | Atomics | Boolean | Date | DataView |
    (?:Eval|Range|Reference|Syntax|Type|URI)?Error | Float(?:32|64)Array |
    Function | Int(?:8|16|32)Array | Number | Object | Promise | Proxy | Reflect
    | RegExp | SharedArrayBuffer | String | Symbol |
    Uint(?:8(?:Clamped)?|16|32)Array | (?:Weak)?(?:Map|Set)
  intrinsicFunctions: >-
    (?:de|en)codeURI(?:Component)? | eval | is(?:Finite|Nan) |
    parse(?:Float|Int) | (?:set|clear)(?:Timeout|Interval|Immediate)
  binNum: '(0[Bb])(?:[01]+(?:_+[01]+)*)(n)?'
  octNum: '(0[Oo])(?:[0-7]+(?:_+[0-7]+)*)(n)?'
  decNum: |-
    (?x)
      (?:
        0 (?: (\.) (?:\d+ (?:_+\d+)* )? )? |
        [1-9](?:_*\d+)* (?: (\.) (?:\d+ (?:_+\d+)*)? )? |
        (\.) \d+ (?:_+\d+)*
      )
      (?: ([Ee]) ([\+\-])? (\d+ (?:_+\d+)*) )?
      (n)?
      {{idEnd}}
  hexNum: '(0[Xx])(?:\h+(?:_+\h+)*)(n)?'
  idEnd: '(?=\$[^\{]|[^_‍‍{{ID_Continue}}]|$)'
  syntaxDirectiveHead: '(\s*syntax\s*:\s*)'
  syntaxDirectiveTail: '\s*(\*\/)\s*(({{identifier}}))?(?=\s*`)'
  syntaxDirective_CSS: '[Cc](?:ss|SS){{syntaxDirectiveTail}}'
  syntaxDirective_DOT: '[Dd](?:ot|OT){{syntaxDirectiveTail}}'
  syntaxDirective_GLSL: '[Gg](?:lsl|LSL){{syntaxDirectiveTail}}'
  syntaxDirective_HTML: '[Hh](?:tml|TML){{syntaxDirectiveTail}}'
  syntaxDirective_JS: '[Jj](?:ava|AVA)?[Ss](?:cript|CRIPT)?{{syntaxDirectiveTail}}'
  syntaxDirective_JS_VALUE: '[Jj](?:ava|AVA)?[Ss](?:cript|CRIPT)?\#value{{syntaxDirectiveTail}}'
  syntaxDirective_JS_OBJECT_LITERAL: '[Jj](?:ava|AVA)?[Ss](?:cript|CRIPT)?\#object-literal{{syntaxDirectiveTail}}'
  syntaxDirective_JS_SIMPLE: >-
    [Jj](?:ava|AVA)?[Ss](?:cript|CRIPT)?-[Ss](?:imple|IMPLE){{syntaxDirectiveTail}}
  syntaxDirective_JSON: '[Jj](?:son|SON){{syntaxDirectiveTail}}'
  syntaxDirective_MARKDOWN: '[Mm](?:ark[Dd](?:own|OWN)|ARKDOWN|[Dd]){{syntaxDirectiveTail}}'
  syntaxDirective_SHELL: '(?:[Bb](?:ash|ASH)|[Ss](?:hell|HELL)){{syntaxDirectiveTail}}'
  syntaxDirective_SQL: '[Ss](?:ql|QL){{syntaxDirectiveTail}}'
  syntaxDirective_SUBLIME_SYNTAX: '[Ss](?:ublime-?[Ss]yntax|UBLIME-SYNTAX){{syntaxDirectiveTail}}'
  syntaxDirective_SUBLIME_SYNTAX_CONTEXT: '[Ss](?:ublime-?[Ss]yntax|UBLIME-SYNTAX)\#contexts?{{syntaxDirectiveTail}}'
  syntaxDirective_XML: '[Xx](?:ml|ML){{syntaxDirectiveTail}}'
  syntaxDirective_YAML: '[Yy](?:aml|AML){{syntaxDirectiveTail}}'
  syntaxDirective: |-
    (?x)
      ((\/\*)){{syntaxDirectiveHead}}
      (?= {{syntaxDirective_CSS}}
        | {{syntaxDirective_DOT}}
        | {{syntaxDirective_GLSL}}
        | {{syntaxDirective_HTML}}
        | {{syntaxDirective_JS}}
        | {{syntaxDirective_JS_VALUE}}
        | {{syntaxDirective_JS_OBJECT_LITERAL}}
        | {{syntaxDirective_JS_SIMPLE}}
        | {{syntaxDirective_JSON}}
        | {{syntaxDirective_MARKDOWN}}
        | {{syntaxDirective_SHELL}}
        | {{syntaxDirective_SQL}}
        | {{syntaxDirective_SUBLIME_SYNTAX}}
        | {{syntaxDirective_SUBLIME_SYNTAX_CONTEXT}}
        | {{syntaxDirective_XML}}
        | {{syntaxDirective_YAML}}
      )
contexts:
  main:
    - meta_include_prototype: false
    - include: root
  root:
    - include: useStrict
    - match: '((import)){{idEnd}}(?!\s*[\(\.])'
      captures:
        '1': storage.type.module.import.es
        '2': keyword.operator.module.js
      push: moduleDeclaration_AFTER_IMPORT
    - match: '((export)){{idEnd}}'
      captures:
        '1': storage.type.module.export.es
        '2': keyword.operator.module.js
      push: moduleDeclaration_AFTER_EXPORT
    - include: statements
  prototype:
    - include: safe_prototype
    - include: non_syntax_block_comment
  safe_prototype:
    - match: \s+
      scope: meta.whitespace.es
    - match: <<<<<<< (.+)\n
      scope: invalid.merge-conflict.delimiter.our-changes
      push: merge_conflict_our_changes
    - match: ((\/\/))
      captures:
        '1': meta.comment.border.es
        '2': punctuation.definition.comment.begin.es
      push:
        - meta_scope: comment.line.es
        - match: \n
          pop: true
        - match: \/\/+
          scope: meta.comment.border.es
        - match: '{{boxchars}}'
          scope: meta.comment.box-drawing.es
        - match: '\b(?i:todo|hack)\b'
          scope: comment.line.todo.es
  non_syntax_block_comment:
    - match: '((\/\*))(?!{{syntaxDirectiveHead}})'
      captures:
        '1': meta.comment.border.es
        '2': punctuation.definition.comment.begin.es
      push: inside_block_comment
  block_comment:
    - match: ((\/\*))
      captures:
        '1': meta.comment.border.es
        '2': punctuation.definition.comment.begin.es
      push: inside_block_comment
  inside_block_comment:
    - meta_scope: comment.block.es
    - match: '((?:\*+)?(\*\/))'
      captures:
        '1': meta.comment.border.es
        '2': punctuation.definition.comment.end.es
      pop: true
    - match: (^\/)?((?!\*\/)\*)+
      scope: meta.comment.border.es
    - match: '{{boxchars}}'
      scope: meta.comment.box-drawing.es
    - match: '\b(?i:todo|hack)\b'
      scope: comment.line.todo.es
  merge_conflict_our_changes:
    - meta_scope: invalid.merge-conflict.our-changes
    - match: =======\n
      scope: invalid.merge-conflict.delimiter.separator
      set: merge_conflict_their_changes
  merge_conflict_their_changes:
    - meta_scope: invalid.merge-conflict.their-changes
    - match: '>>>>>>> (.+)\n'
      scope: invalid.merge-conflict.delimiter.their-changes
      pop: true
  else_pop:
    - match: '{{PLA_anything}}'
      pop: true
  optional_semicolon_pop:
    - match: $
      pop: true
    - match: ;
      scope: punctuation.terminator.statement.es
      pop: true
    - include: else_pop
  semicolon_maybe:
    - match: ;
      scope: punctuation.terminator.statement.es
      pop: true
    - include: else_pop
  other_illegal:
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
  other_illegal_pop:
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      pop: true
  statements:
    - match: ;
      scope: punctuation.terminator.statement.es
    - match: '{{PLA_anything}}'
      push: statement
  statement:
    - match: ;
      scope: punctuation.terminator.statement.es
      pop: true
    - match: '((\{))'
      captures:
        '1': punctuation.definition.block.begin.es
        '2': meta.brace.curly.js
      set: blockStatement
    - match: 'if{{idEnd}}'
      scope: keyword.control.conditional.if.es
      set: ifStatement_AFTER_IF
    - match: 'do{{idEnd}}'
      scope: keyword.control.loop.do.es
      set: doStatement_AFTER_DO
    - match: 'let{{idEnd}}'
      scope: storage.type.variable.let.es
      set: constLetVarDeclaration_AFTER_WORD
    - match: 'var{{idEnd}}'
      scope: storage.type.variable.var.es
      set: constLetVarDeclaration_AFTER_WORD
    - match: 'for{{idEnd}}'
      scope: keyword.control.loop.for.es
      set: forStatement_AFTER_FOR
    - match: 'try{{idEnd}}'
      scope: keyword.control.trycatch.try.es
      set: tryStatement_AFTER_TRY
    - match: 'with{{idEnd}}'
      scope: keyword.control.with.es
      set: withStatement_AFTER_WITH
    - match: 'const{{idEnd}}'
      scope: storage.type.constant.es
      set: constLetVarDeclaration_AFTER_WORD
    - match: 'class{{idEnd}}'
      scope: storage.type.class.es
      set: classDeclaration_AFTER_CLASS
    - match: 'while{{idEnd}}'
      scope: keyword.control.loop.while.es
      set: whileStatement_AFTER_WHILE
    - match: 'throw{{idEnd}}'
      scope: keyword.control.flow.throw.es
      set: throwStatement
    - match: 'break{{idEnd}}'
      scope: keyword.control.flow.break.es
      set: breakOrContinue_AFTER_WORD
    - match: 'return{{idEnd}}'
      scope: keyword.control.flow.return.es
      set: returnStatement
    - match: 'switch{{idEnd}}'
      scope: keyword.control.switch.es
      set: switchStatement_AFTER_SWITCH
    - match: ((function))\s*((\*))
      captures:
        '1': storage.type.function.js
        '2': storage.type.function.generator.es
        '3': keyword.generator.asterisk.js
        '4': storage.modifier.generator.asterisk.es
      set: generatorDeclaration_AFTER_ASTERISK
    - match: '((function)){{idEnd}}(?!\s*\.)'
      captures:
        '1': storage.type.function.js
        '2': storage.type.function.es
      set: functionDeclaration_AFTER_FUNCTION
    - match: '(async)\s*((function)){{idEnd}}'
      captures:
        '1': storage.modifier.async.es
        '2': storage.type.function.js
        '3': storage.type.function.async.es
      set: asyncDeclaration_AFTER_FUNCTION
    - match: 'continue{{idEnd}}'
      scope: keyword.control.flow.continue.es
      set: breakOrContinue_AFTER_WORD
    - match: 'debugger{{idEnd}}'
      scope: keyword.other.debugger.es
      set: optional_semicolon_pop
    - match: '(({{identifier}})\s*(:(?!:)))'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': entity.name.statement.es
        '3': punctuation.separator.label-statement.es
    - match: ((@))
      captures:
        '1': punctuation.definition.tag.js
        '2': punctuation.definition.decorator.es
      set:
        - classDeclaration_AFTER_DECORATOR
        - decoratorExpression
    - match: ;
      scope: punctuation.terminator.statement.es
    - include: expression
  blockStatement:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.block.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: statements
  breakOrContinue_AFTER_WORD:
    - match: '$|(?=\})'
      pop: true
    - match: ;
      scope: punctuation.terminator.statement.es
      pop: true
    - match: '(({{identifier}}))'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': entity.name.statement.es
      set: optional_semicolon_pop
    - include: else_pop
  doStatement_AFTER_DO:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.block.loop.begin.es
        '2': meta.brace.curly.js
      set: doStatement_STMT_AFTER_BRACE
    - match: '{{PLA_anything}}'
      set:
        - doStatement_AFTER_STMT
        - semicolon_maybe
        - statement
  doStatement_STMT_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.block.loop.end.es
        '2': meta.brace.curly.js
      set: doStatement_AFTER_STMT
    - include: statements
  doStatement_AFTER_STMT:
    - match: 'while{{idEnd}}'
      scope: keyword.control.loop.while.es
      set: doStatement_AFTER_WHILE
    - include: else_pop
  doStatement_AFTER_WHILE:
    - match: ((\())
      captures:
        '1': punctuation.definition.expression.loop.begin.es
        '2': meta.brace.round.js
      set:
        - doStatement_AFTER_EXP
        - expression
    - include: other_illegal_pop
  doStatement_AFTER_EXP:
    - match: ((\)))
      captures:
        '1': punctuation.definition.expression.loop.end.es
        '2': meta.brace.round.js
      pop: true
    - include: other_illegal
  forStatement_AFTER_FOR:
    - match: ((\())
      captures:
        '1': punctuation.definition.expression.loop.begin.es
        '2': meta.brace.round.js
      set: forStatement_AFTER_PAREN_OPEN
    - match: 'await{{idEnd}}'
      scope: keyword.control.flow.await
      set:
        - match: ((\())
          captures:
            '1': punctuation.definition.expression.loop.begin.es
            '2': meta.brace.round.js
          set: forStatement_AFTER_PAREN_OPEN
        - include: other_illegal_pop
    - match: '(each){{idEnd}}'
      scope: keyword.control.flow.loop.es
      captures:
        '1': invalid.deprecated.es
      set: forStatement_AFTER_EACH
    - include: other_illegal_pop
  forStatement_AFTER_EACH:
    - match: ((\())
      captures:
        '1': punctuation.definition.expression.loop.begin.es
        '2': meta.brace.round.js
      set: forStatement_AFTER_PAREN_OPEN
    - include: other_illegal_pop
  forStatement_AFTER_PAREN_OPEN:
    - match: \)
      scope: invalid.illegal.token.es
      set: whileOrForStatement_STMT
    - match: '(?=(?![^;]+\b(in|of)\b).*;.)'
      set: forStatement_EXP_LEGACY_INIT
    - match: 'var{{idEnd}}'
      scope: storage.type.variable.var.es
      set: forStatement_IN_OR_OF_DECLARATION_AFTER_WORD
    - match: 'let{{idEnd}}'
      scope: storage.type.variable.let.es
      set: forStatement_IN_OR_OF_DECLARATION_AFTER_WORD
    - match: 'const{{idEnd}}'
      scope: storage.type.constant.es
      set: forStatement_IN_OR_OF_DECLARATION_AFTER_WORD
    - match: '{{PLA_anything}}'
      set:
        - forStatement_IN_OR_OF_AFTER_BINDING
        - assignmentExpression_NO_IN
  forStatement_EXP_LEGACY_INIT:
    - match: ;
      scope: punctuation.separator.loop-expression.es
      set: forStatement_EXP_LEGACY_COND
    - match: \)
      scope: invalid.illegal.token.es
      set: whileOrForStatement_STMT
    - match: 'var{{idEnd}}'
      scope: storage.type.variable.var.es
      set:
        - forStatement_EXP_LEGACY_INIT_AFTER_EXP
        - constLetVarDeclaration_AFTER_WORD
    - match: 'let{{idEnd}}'
      scope: storage.type.variable.let.es
      set:
        - forStatement_EXP_LEGACY_INIT_AFTER_EXP
        - constLetVarDeclaration_AFTER_WORD
    - match: 'const{{idEnd}}'
      scope: storage.type.constant.es
      set:
        - forStatement_EXP_LEGACY_INIT_AFTER_EXP
        - constLetVarDeclaration_AFTER_WORD
    - match: '{{PLA_anything}}'
      set:
        - forStatement_EXP_LEGACY_INIT_AFTER_EXP
        - expression
  forStatement_EXP_LEGACY_INIT_AFTER_EXP:
    - match: ;
      scope: punctuation.separator.loop-expression.es
      set: forStatement_EXP_LEGACY_COND
    - match: \)
      scope: invalid.illegal.token.es
      set: whileOrForStatement_STMT
    - include: other_illegal
  forStatement_EXP_LEGACY_COND:
    - match: ;
      scope: punctuation.separator.loop-expression.es
      set: forStatement_EXP_LEGACY_AFTERTHOUGHT
    - match: \)
      scope: invalid.illegal.token.es
      set: whileOrForStatement_STMT
    - match: '{{PLA_anything}}'
      set:
        - forStatement_EXP_LEGACY_COND_AFTER_EXP
        - expression
  forStatement_EXP_LEGACY_COND_AFTER_EXP:
    - match: ;
      scope: punctuation.separator.loop-expression.es
      set: forStatement_EXP_LEGACY_AFTERTHOUGHT
    - match: \)
      scope: invalid.illegal.token.es
      set: whileOrForStatement_STMT
    - include: other_illegal
  forStatement_EXP_LEGACY_AFTERTHOUGHT:
    - match: ((\)))
      captures:
        '1': punctuation.definition.expression.loop.end.es
        '2': meta.brace.round.js
      set: whileOrForStatement_STMT
    - match: '{{PLA_anything}}'
      set:
        - forStatement_AFTER_FINAL_EXP
        - expression
  forStatement_IN_OR_OF_DECLARATION_AFTER_WORD:
    - match: '((\[))'
      captures:
        '1': punctuation.definition.binding.array.begin.es
        '2': meta.brace.square.js
      set:
        - forStatement_IN_OR_OF_AFTER_BINDING
        - bindingArray
    - match: '((\{))'
      captures:
        '1': punctuation.definition.binding.object.begin.es
        '2': meta.brace.curly.js
      set:
        - forStatement_IN_OR_OF_AFTER_BINDING
        - bindingObject
    - match: '{{identifier}}'
      scope: variable.other.readwrite.es
      set: forStatement_IN_OR_OF_AFTER_BINDING
    - include: other_illegal
  forStatement_IN_OR_OF_AFTER_BINDING:
    - match: 'of{{idEnd}}(?=\s*\$\{)'
      scope: keyword.control.loop.of.es
      set:
        - forStatement_AFTER_FINAL_EXP
        - assignmentExpression_INTERP
    - match: 'of{{idEnd}}'
      scope: keyword.control.loop.of.es
      set:
        - forStatement_AFTER_FINAL_EXP
        - assignmentExpression
    - match: 'in{{idEnd}}'
      scope: keyword.control.loop.in.es
      set:
        - forStatement_AFTER_FINAL_EXP
        - expression
    - match: ','
      scope: invalid.illegal
    - match: ;
      scope: punctuation.separator.loop-expression.es
      set: forStatement_EXP_LEGACY_COND
    - include: other_illegal
  forStatement_AFTER_FINAL_EXP:
    - match: ((\)))
      captures:
        '1': punctuation.definition.expression.loop.end.es
        '2': meta.brace.round.js
      set: whileOrForStatement_STMT
    - include: other_illegal
  ifStatement_AFTER_IF:
    - match: ((\())
      captures:
        '1': punctuation.definition.expression.conditional.begin.es
        '2': meta.brace.round.js
      set:
        - ifStatement_AFTER_EXP
        - expression
    - include: other_illegal_pop
  ifStatement_AFTER_EXP:
    - match: ((\)))
      captures:
        '1': punctuation.definition.expression.conditional.end.es
        '2': meta.brace.round.js
      set: ifStatement_STMT
    - include: other_illegal
  ifStatement_STMT:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.block.conditional.begin.es
        '2': meta.brace.curly.js
      set: ifStatement_STMT_AFTER_BRACE
    - match: '{{PLA_anything}}'
      set:
        - ifStatement_AFTER_STMT
        - semicolon_maybe
        - statement
  ifStatement_STMT_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.block.conditional.end.es
        '2': meta.brace.curly.js
      set: ifStatement_AFTER_STMT
    - include: statements
  ifStatement_AFTER_STMT:
    - match: 'else{{idEnd}}'
      scope: keyword.control.conditional.else.es
      set: statement
    - include: else_pop
  returnStatement:
    - match: '$|(?=\})'
      pop: true
    - match: ;
      scope: punctuation.terminator.statement.es
      pop: true
    - match: '{{PLA_anything}}'
      set:
        - optional_semicolon_pop
        - expression
  switchStatement_AFTER_SWITCH:
    - match: ((\())
      captures:
        '1': punctuation.definition.expression.switch.begin.es
        '2': meta.brace.round.js
      set:
        - switchStatement_AFTER_EXP
        - expression
    - include: other_illegal_pop
  switchStatement_AFTER_EXP:
    - match: ((\)))
      captures:
        '1': punctuation.definition.expression.switch.end.es
        '2': meta.brace.round.js
      set: switchStatement_BEFORE_BRACE
    - include: other_illegal
  switchStatement_BEFORE_BRACE:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.block.switch.begin.es
        '2': meta.brace.curly.js
      set: switchStatement_AFTER_BRACE
    - include: other_illegal_pop
  switchStatement_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.block.switch.end.es
        '2': meta.brace.curly.js
      pop: true
    - match: 'case{{idEnd}}'
      scope: keyword.control.switch.case.es
      set:
        - switchStatement_CASE_AFTER_EXP
        - expression
    - match: 'default{{idEnd}}'
      scope: keyword.control.switch.case.default.es
      set: switchStatement_CASE_AFTER_EXP
    - include: other_illegal
  switchStatement_CASE_AFTER_EXP:
    - match: ':'
      scope: punctuation.separator.case-statements.es
      set: switchStatement_CASE_STMT
    - match: '((\}))'
      captures:
        '1': invalid.illegal.token.es
        '2': meta.brace.curly.js
      pop: true
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: switchStatement_AFTER_BRACE
  switchStatement_CASE_STMT:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.block.switch.end.es
        '2': meta.brace.curly.js
      pop: true
    - match: 'case{{idEnd}}'
      scope: keyword.control.switch.case.es
      set:
        - switchStatement_CASE_AFTER_EXP
        - expression
    - match: 'default{{idEnd}}'
      scope: keyword.control.switch.case.default.es
      set: switchStatement_CASE_AFTER_EXP
    - include: statements
  throwStatement:
    - match: '$|(?=\})'
      pop: true
    - match: '{{PLA_anything}}'
      set:
        - optional_semicolon_pop
        - expression
  tryStatement_AFTER_TRY:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.block.trycatch.begin.es
        '2': meta.brace.curly.js
      set: tryStatement_AFTER_TRY_BRACE
    - include: other_illegal_pop
  tryStatement_AFTER_TRY_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.block.trycatch.end.es
        '2': meta.brace.curly.js
      set: tryStatement_AFTER_TRY_BLOCK
    - include: statements
  tryStatement_AFTER_TRY_BLOCK:
    - match: 'catch{{idEnd}}'
      scope: keyword.control.trycatch.catch.es
      set: tryStatement_AFTER_CATCH
    - match: 'finally{{idEnd}}'
      scope: keyword.control.trycatch.finally.es
      set: tryStatement_AFTER_FINALLY
    - include: other_illegal_pop
  tryStatement_AFTER_CATCH:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.catch.begin.es
        '2': meta.brace.round.js
      set: tryStatement_CATCH_PARAM
    - match: '((\{))'
      captures:
        '1': punctuation.definition.block.trycatch.begin.es
        '2': meta.brace.curly.js
      set: tryStatement_AFTER_CATCH_BRACE
    - include: other_illegal_pop
  tryStatement_CATCH_PARAM:
    - match: '{{identifier}}'
      scope: variable.parameter.catch.es
      set: tryStatement_AFTER_CATCH_PARAM
    - match: '((\[))'
      captures:
        '1': punctuation.definition.binding.array.parameter.begin.es
        '2': meta.brace.square.js
      set:
        - tryStatement_AFTER_CATCH_PARAM
        - bindingArray_PARAM
    - match: '((\{))'
      captures:
        '1': punctuation.definition.binding.object.parameter.begin.es
        '2': meta.brace.curly.js
      set:
        - tryStatement_AFTER_CATCH_PARAM
        - bindingObject_PARAM
    - match: \)
      scope: invalid.illegal.token.es
      set: tryStatement_AFTER_CATCH_PARAM
  tryStatement_AFTER_CATCH_PARAM:
    - match: ((\)))
      captures:
        '1': punctuation.definition.parameters.catch.end.es
        '2': meta.brace.round.js
      set: tryStatement_BEFORE_CATCH_BRACE
    - include: other_illegal
  tryStatement_BEFORE_CATCH_BRACE:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.block.trycatch.begin.es
        '2': meta.brace.curly.js
      set: tryStatement_AFTER_CATCH_BRACE
    - include: other_illegal_pop
  tryStatement_AFTER_CATCH_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.block.trycatch.end.es
        '2': meta.brace.curly.js
      set: tryStatement_AFTER_CATCH_BLOCK
    - include: statements
  tryStatement_AFTER_CATCH_BLOCK:
    - match: 'finally{{idEnd}}'
      scope: keyword.control.trycatch.finally.es
      set: tryStatement_AFTER_FINALLY
    - include: else_pop
  tryStatement_AFTER_FINALLY:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.block.trycatch.begin.es
        '2': meta.brace.curly.js
      set: tryStatement_AFTER_FINALLY_BRACE
    - include: other_illegal_pop
  tryStatement_AFTER_FINALLY_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.block.trycatch.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: statements
  whileStatement_AFTER_WHILE:
    - match: ((\())
      captures:
        '1': punctuation.definition.expression.loop.begin.es
        '2': meta.brace.round.js
      set:
        - whileStatement_AFTER_EXP
        - expression
    - include: other_illegal_pop
  whileStatement_AFTER_EXP:
    - match: ((\)))
      captures:
        '1': punctuation.definition.expression.loop.end.es
        '2': meta.brace.round.js
      set: whileOrForStatement_STMT
    - include: other_illegal
  whileOrForStatement_STMT:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.block.loop.begin.es
        '2': meta.brace.curly.js
      set: whileOrForStatement_STMT_AFTER_BRACE
    - match: '{{PLA_anything}}'
      set: statement
  whileOrForStatement_STMT_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.block.loop.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: statements
  withStatement_AFTER_WITH:
    - match: ((\())
      captures:
        '1': punctuation.definition.expression.with.begin.es
        '2': meta.brace.round.js
      set:
        - withStatement_AFTER_EXP
        - expression
    - include: other_illegal_pop
  withStatement_AFTER_EXP:
    - match: ((\)))
      captures:
        '1': punctuation.definition.expression.with.end.es
        '2': meta.brace.round.js
      set: withStatement_STMT
    - include: other_illegal
  withStatement_STMT:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.block.with.begin.es
        '2': meta.brace.curly.js
      set: withStatement_STMT_AFTER_BRACE
    - match: '{{PLA_anything}}'
      set: statement
  withStatement_STMT_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.block.with.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: statements
  classDeclaration_AFTER_CLASS:
    - match: '(({{identifier}}|(?=\s*(?:\{|extends))))'
      captures:
        '1': entity.name.class.js
        '2': entity.name.class.es
      set: classDeclaration_AFTER_NAME
    - include: other_illegal_pop
  classDeclaration_AFTER_NAME:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.class.body.begin.es
        '2': meta.brace.curly.js
      set: classDeclaration_AFTER_BRACE
    - match: '((extends))\s*(?=\$\{)'
      captures:
        '1': storage.type.extends.js
        '2': storage.modifier.extends.es
      set: classDeclaration_AFTER_HERITAGE
    - match: '((extends)){{idEnd}}(?=\s*\$\{)'
      captures:
        '1': storage.type.extends.js
        '2': storage.modifier.extends.es
      set:
        - classDeclaration_AFTER_HERITAGE
        - assignmentExpression_INTERP
    - match: '((extends)){{idEnd}}'
      captures:
        '1': storage.type.extends.js
        '2': storage.modifier.extends.es
      set:
        - classDeclaration_AFTER_HERITAGE
        - assignmentExpression
    - include: other_illegal_pop
  classDeclaration_AFTER_HERITAGE:
    - meta_scope: meta.super-expression.es
    - match: '((\{))'
      captures:
        '1': punctuation.definition.class.body.begin.es
        '2': meta.brace.curly.js
      set: classDeclaration_AFTER_BRACE
    - include: other_illegal_pop
  classDeclaration_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.class.body.end.es
        '2': meta.brace.curly.js
      pop: true
    - match: ;
      scope: punctuation.terminator.statement.es
    - match: '((static)){{idEnd}}'
      captures:
        '1': storage.modifier.static.es
        '2': storage.type.js
      set: classDeclaration_AFTER_STATIC
    - match: '((constructor)){{idEnd}}'
      captures:
        '1': entity.name.method.js
        '2': entity.name.constructor.es
      push: constructorMethod_AFTER_CONSTRUCTOR
    - match: ((@))
      captures:
        '1': punctuation.definition.tag.js
        '2': punctuation.definition.decorator.es
      push: decoratorExpression
    - include: classDeclaration_METHOD_COMMON
    - include: other_illegal_pop
  classDeclaration_AFTER_METHOD_OR_FIELD_NAME:
    - match: ;
      scope: punctuation.terminator.property.es
      pop: true
    - match: =
      scope: punctuation.separator.key-value.es
      set:
        - - match: ;
            scope: punctuation.terminator.property.es
            pop: true
          - include: else_pop
        - - include: assignmentExpression
    - match: (?!\()
      pop: true
    - include: method_AFTER_NAME
  classDeclaration_AFTER_STATIC:
    - include: classDeclaration_METHOD_COMMON
    - match: '{{PLA_anything}}'
      set: classDeclaration_AFTER_BRACE
  classDeclaration_METHOD_COMMON:
    - match: '((\*))(?=\s*\${)'
      captures:
        '1': keyword.generator.asterisk.js
        '2': storage.modifier.generator.asterisk.method.es
      set:
        - classDeclaration_AFTER_BRACE
        - generatorMethod_AFTER_NAME_INTERP
    - match: '((get))(?=\s*\$\{)(?!\s*[\(=;])'
      captures:
        '1': storage.type.accessor.js
        '2': storage.modifier.accessor.get.es
      set:
        - classDeclaration_AFTER_BRACE
        - accessorMethod_AFTER_GET_NAME_INTERP
    - match: '((set))(?=\s*\$\{)(?!\s*[\(=;])'
      captures:
        '1': storage.type.accessor.js
        '2': storage.modifier.accessor.set.es
      set:
        - classDeclaration_AFTER_BRACE
        - accessorMethod_AFTER_SET_NAME_INTERP
    - match: '((async))((\s*\*))?(?=\s*\${)'
      captures:
        '1': storage.type.accessor.js
        '2': storage.modifier.async.method.es
        '3': keyword.generator.asterisk.js
        '4': storage.modifier.generator.asterisk.method.es
      set:
        - classDeclaration_AFTER_BRACE
        - asyncMethod_AFTER_NAME_INTERP
    - match: '(({{identifierName}}))(?=\$\{)'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.es
      set:
        - classDeclaration_AFTER_BRACE
        - method_AFTER_NAME_INTERP
    - match: ((\*))
      captures:
        '1': keyword.generator.asterisk.js
        '2': storage.modifier.generator.asterisk.method.es
      set:
        - classDeclaration_AFTER_BRACE
        - generatorMethod_AFTER_ASTERISK
    - match: '((get)){{idEnd}}(?!\s*[\(=;])'
      captures:
        '1': storage.type.accessor.js
        '2': storage.modifier.accessor.get.es
      set:
        - classDeclaration_AFTER_BRACE
        - accessorMethod_AFTER_GET
    - match: '((set)){{idEnd}}(?!\s*[\(=;])'
      captures:
        '1': storage.type.accessor.js
        '2': storage.modifier.accessor.set.es
      set:
        - classDeclaration_AFTER_BRACE
        - accessorMethod_AFTER_SET
    - match: '((async)){{idEnd}}((\s*\*))?'
      captures:
        '1': storage.type.js
        '2': storage.modifier.async.method.es
        '3': keyword.generator.asterisk.js
        '4': storage.modifier.generator.asterisk.method.es
      set:
        - classDeclaration_AFTER_BRACE
        - asyncMethod_AFTER_ASYNC
    - match: >-
        (((?:(#{{identifierName}})|({{identifierName}}))))\s*(=)\s*(((async))\s+)?(?=\((?<parens>[^\(\)]|\(\g<parens>*\))*\)\s*=>)
      captures:
        '1': entity.name.function.js
        '2': meta.symbol-helper.arrow.es
        '3': variable.language.private.class.es
        '4': variable.other.readwrite.property.class.es
        '5': punctuation.separator.key-value.es
        '7': storage.type.js
        '8': storage.modifier.async.expression.es
      set:
        - - include: classDeclaration_AFTER_BRACE
        - - match: ;
            scope: punctuation.terminator.property.es
          - include: else_pop
        - - match: '{{PLA_anything}}'
            set: assignmentExpression
    - match: '(?:(#{{identifierName}})|({{identifierName}})){{idEnd}}(?!\s*\()'
      captures:
        '1': variable.language.private.class.es
        '2': variable.other.readwrite.property.class.es
      set:
        - - include: classDeclaration_AFTER_BRACE
        - - match: ;
            scope: punctuation.terminator.property.es
            pop: true
          - include: else_pop
        - - match: =
            scope: punctuation.separator.key-value.es
            set: assignmentExpression
          - match: '{{PLA_anything}}'
            pop: true
    - match: (?=\()
      set:
        - classDeclaration_AFTER_BRACE
        - method_AFTER_NAME
    - match: '(({{identifierName}}))(?=\$\{)'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.es
      set:
        - classDeclaration_AFTER_BRACE
        - method_AFTER_NAME_INTERP
    - match: '(({{identifierName}})){{idEnd}}'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.es
      set:
        - classDeclaration_AFTER_BRACE
        - method_AFTER_NAME
    - match: ''''
      scope: punctuation.definition.string.quoted.single.begin.es
      set:
        - classDeclaration_AFTER_BRACE
        - classDeclaration_AFTER_METHOD_OR_FIELD_NAME
        - stringSingle_AFTER_OPEN
    - match: '"'
      scope: punctuation.definition.string.quoted.double.begin.es
      set:
        - classDeclaration_AFTER_BRACE
        - classDeclaration_AFTER_METHOD_OR_FIELD_NAME
        - stringDouble_AFTER_OPEN
    - match: '({{decNum}})'
      scope: constant.numeric.decimal.es
      captures:
        '1': entity.name.method.es
        '2': punctuation.decimal.es
        '3': punctuation.decimal.es
        '4': punctuation.decimal.es
        '5': meta.numeric.exponent.e.es
        '6': meta.numeric.exponent.sign.es
        '7': meta.numeric.exponent.digit.es
        '8': meta.numeric.suffix.es
      set:
        - classDeclaration_AFTER_BRACE
        - classDeclaration_AFTER_METHOD_OR_FIELD_NAME
    - match: '({{binNum}})'
      scope: constant.numeric.binary.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set:
        - classDeclaration_AFTER_BRACE
        - classDeclaration_AFTER_METHOD_OR_FIELD_NAME
    - match: '({{octNum}})'
      scope: constant.numeric.octal.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set:
        - classDeclaration_AFTER_BRACE
        - classDeclaration_AFTER_METHOD_OR_FIELD_NAME
    - match: '({{hexNum}})'
      scope: constant.numeric.hexadecimal.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set:
        - classDeclaration_AFTER_BRACE
        - classDeclaration_AFTER_METHOD_OR_FIELD_NAME
    - match: '((\[))'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - classDeclaration_AFTER_BRACE
        - classDeclaration_AFTER_METHOD_OR_FIELD_NAME
        - computedProp_AFTER_AE
        - assignmentExpression
  classDeclaration_AFTER_DECORATOR:
    - match: ((@))
      captures:
        '1': punctuation.definition.tag.js
        '2': punctuation.definition.decorator.es
      push: decoratorExpression
    - match: class
      scope: storage.type.class.es
      set: classDeclaration_AFTER_CLASS
    - match: (?=export\s+(default\s+)?class)
      pop: true
    - include: other_illegal_pop
  constLetVarDeclaration_AFTER_WORD:
    - match: '((({{allThreeIDs}})))(?=\s*=\s*function\s*\*)'
      captures:
        '1': meta.function.js entity.name.function.js
        '2': meta.symbol-helper.generator.es
        '3': variable.other.readwrite.allCap.es
        '4': variable.other.readwrite.initCap.es
        '5': variable.other.readwrite.es
        '6': entity.name.function.generator.es
      set: constLetVarDeclaration_AFTER_BINDING
    - match: '((({{allThreeIDs}})))(?=\s*=\s*async\s+function{{idEnd}})'
      captures:
        '1': meta.function.js entity.name.function.js
        '2': meta.symbol-helper.function.es
        '3': variable.other.readwrite.allCap.es
        '4': variable.other.readwrite.initCap.es
        '5': variable.other.readwrite.es
        '6': entity.name.function.async.es
      set: constLetVarDeclaration_AFTER_BINDING
    - match: '((({{allThreeIDs}})))(?=\s*=\s*function{{idEnd}})'
      captures:
        '1': meta.function.js entity.name.function.js
        '2': meta.symbol-helper.function.es
        '3': variable.other.readwrite.allCap.es
        '4': variable.other.readwrite.initCap.es
        '5': variable.other.readwrite.es
        '6': entity.name.function.es
      set: constLetVarDeclaration_AFTER_BINDING
    - match: '(({{allThreeIDs}}))(?=\s*=\s*class\s*(?:\{|extends{idEnd}))'
      captures:
        '1': meta.function.js entity.name.class.js
        '2': meta.symbol-helper.class.es
        '3': variable.other.readwrite.allCap.es
        '4': variable.other.readwrite.initCap.es
        '5': variable.other.readwrite.es
      set: constLetVarDeclaration_AFTER_BINDING
    - match: |-
        (?x)
          ((( {{allThreeIDs}} )))
          (?=
            \s* = \s* (async\s+)?
            (?:
              \(
                (?<parens> [^\(\)] | \( \g<parens>* \) )*
              \)
              |
              {{identifierName}}
            )
            \s* =>
          )
      captures:
        '1': meta.function.arrow.js entity.name.function.js
        '2': meta.symbol-helper.arrow.es
        '3': variable.other.readwrite.allCap.es
        '4': variable.other.readwrite.initCap.es
        '5': variable.other.readwrite.es
        '6': entity.name.function.es
      set: constLetVarDeclaration_AFTER_BINDING
    - match: '{{allThreeIDs}}'
      captures:
        '1': variable.other.readwrite.allCap.es
        '2': variable.other.readwrite.initCap.es
        '3': variable.other.readwrite.es
      set: constLetVarDeclaration_AFTER_BINDING
    - match: '((\[))'
      captures:
        '1': punctuation.definition.binding.array.begin.es
        '2': meta.brace.square.js
      set:
        - constLetVarDeclaration_AFTER_BINDING_PATTERN
        - bindingArray
    - match: '((\{))'
      captures:
        '1': punctuation.definition.binding.object.begin.es
        '2': meta.brace.curly.js
      set:
        - constLetVarDeclaration_AFTER_BINDING_PATTERN
        - bindingObject
    - include: constLetVarDeclaration_AFTER_BINDING_INTERP
    - include: else_pop
  constLetVarDeclaration_AFTER_BINDING:
    - match: '((,))'
      captures:
        '1': punctuation.separator.binding-binding.es
        '2': meta.delimiter.comma.js
      set: constLetVarDeclaration_AFTER_WORD
    - match: '=(?=\s*\$\{)'
      scope: keyword.operator.assignment.es
      push: assignmentExpression_INTERP
    - match: =
      scope: keyword.operator.assignment.es
      push: assignmentExpression
    - include: else_pop
  constLetVarDeclaration_AFTER_BINDING_PATTERN:
    - match: '=(?=\s*\$\{)'
      scope: keyword.operator.assignment.es
      set:
        - constLetVarDeclaration_AFTER_BINDING
        - assignmentExpression_INTERP
    - match: =
      scope: keyword.operator.assignment.es
      set:
        - constLetVarDeclaration_AFTER_BINDING
        - assignmentExpression
    - include: other_illegal_pop
  functionDeclaration_AFTER_FUNCTION:
    - match: '(({{allThreeIDs}}))(?=\$\{)'
      captures:
        '1': entity.name.function.allCap.es
        '2': entity.name.function.initCap.es
        '3': entity.name.function.es
    - match: '{{allThreeIDs}}'
      captures:
        '1': entity.name.function.allCap.es
        '2': entity.name.function.initCap.es
        '3': entity.name.function.es
      set: functionDeclaration_AFTER_NAME
    - include: functionDeclaration_AFTER_NAME
    - include: other_illegal_pop
  functionDeclaration_AFTER_NAME:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.function.begin.es
        '2': meta.brace.round.js
      set:
        - functionDeclaration_AFTER_PARAMS
        - parameters
    - include: other_illegal_pop
  functionDeclaration_AFTER_PARAMS:
    - match: ((\)))
      captures:
        '1': punctuation.definition.parameters.function.end.es
        '2': meta.brace.round.js
      set: functionDeclaration_BEFORE_BRACE
    - include: other_illegal
  functionDeclaration_BEFORE_BRACE:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.function.body.begin.es
        '2': meta.brace.curly.js
      set: functionDeclaration_AFTER_BRACE
    - include: other_illegal_pop
  functionDeclaration_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.function.body.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: useStrict
    - include: statements
  asyncDeclaration_AFTER_FUNCTION:
    - match: ((\*))
      captures:
        '1': keyword.generator.asterisk.js
        '2': storage.modifier.generator.asterisk.method.es
      set:
        - match: '{{allThreeIDs}}'
          scope: entity.name.function.async.es
          set: asyncDeclaration_AFTER_NAME
        - include: other_illegal_pop
    - match: '{{allThreeIDs}}'
      scope: entity.name.function.async.es
      set: asyncDeclaration_AFTER_NAME
    - include: other_illegal_pop
  asyncDeclaration_AFTER_NAME:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.function.async.begin.es
        '2': meta.brace.round.js
      set:
        - asyncDeclaration_AFTER_PARAMS
        - parameters
    - include: other_illegal_pop
  asyncDeclaration_AFTER_PARAMS:
    - match: ((\)))
      captures:
        '1': punctuation.definition.parameters.function.async.end.es
        '2': meta.brace.round.js
      set: asyncDeclaration_BEFORE_BRACE
    - include: other_illegal
  asyncDeclaration_BEFORE_BRACE:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.function.async.body.begin.es
        '2': meta.brace.curly.js
      set: asyncDeclaration_AFTER_BRACE
    - include: other_illegal_pop
  asyncDeclaration_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.function.async.body.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: useStrict
    - include: statements
  generatorDeclaration_AFTER_ASTERISK:
    - match: '{{identifier}}'
      scope: entity.name.function.generator.es
      set: generatorDeclaration_AFTER_NAME
    - include: other_illegal_pop
  generatorDeclaration_AFTER_NAME:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.generator.begin.es
        '2': meta.brace.round.js
      set:
        - generatorDeclaration_AFTER_PARAMS
        - parameters
    - include: other_illegal_pop
  generatorDeclaration_AFTER_PARAMS:
    - match: ((\)))
      captures:
        '1': punctuation.definition.parameters.generator.end.es
        '2': meta.brace.round.js
      set: generatorDeclaration_BEFORE_BRACE
    - include: other_illegal
  generatorDeclaration_BEFORE_BRACE:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.generator.body.begin.es
        '2': meta.brace.curly.js
      set: generatorDeclaration_AFTER_BRACE
    - include: other_illegal_pop
  generatorDeclaration_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.generator.body.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: useStrict
    - include: statements
  moduleDeclaration_AFTER_EXPORT:
    - match: ((\*))
      captures:
        '1': keyword.operator.module.js
        '2': storage.modifier.module.namespace.es
      set: moduleDeclaration_BEFORE_FROM
    - match: '((\{))'
      captures:
        '1': punctuation.definition.module-binding.begin.es
        '2': meta.brace.curly.js
      set: moduleDeclaration_EXPORT_BINDING_AFTER_BRACE
    - match: ((@))
      captures:
        '1': punctuation.definition.tag.js
        '2': punctuation.definition.decorator.es
      push: decoratorExpression
    - match: '((default)){{idEnd}}'
      captures:
        '1': keyword.operator.module.js
        '2': storage.modifier.module.default.es
      set: moduleDeclaration_AFTER_DEFAULT
    - match: 'let{{idEnd}}'
      scope: storage.type.variable.let.es
      set: constLetVarDeclaration_AFTER_WORD
    - match: 'var{{idEnd}}'
      scope: storage.type.variable.var.es
      set: constLetVarDeclaration_AFTER_WORD
    - match: 'class{{idEnd}}'
      scope: storage.type.class.es
      set: classDeclaration_AFTER_CLASS
    - match: 'const{{idEnd}}'
      scope: storage.type.constant.es
      set: constLetVarDeclaration_AFTER_WORD
    - match: ((function))\s*((\*))
      captures:
        '1': storage.type.function.js
        '2': storage.type.function.generator.es
        '3': keyword.generator.asterisk.js
        '4': storage.modifier.generator.asterisk.es
      set: generatorDeclaration_AFTER_ASTERISK
    - match: '((function)){{idEnd}}'
      captures:
        '1': storage.type.function.js
        '2': storage.type.function.es
      set: functionDeclaration_AFTER_FUNCTION
    - match: '((async))\s*((function)){{idEnd}}'
      captures:
        '1': storage.type.js
        '2': storage.modifier.async.es
        '3': storage.type.function.js
        '4': storage.type.function.async.es
      set: asyncDeclaration_AFTER_FUNCTION
    - match: '{{identifier}}'
      scope: variable.other.readwrite.export.es
      set: moduleDeclaration_BEFORE_FROM
    - include: other_illegal_pop
  moduleDeclaration_AFTER_DEFAULT:
    - match: 'class{{idEnd}}'
      scope: storage.type.class.es
      set: moduleDeclaration_DEFAULT_AFTER_CLASS
    - match: ((function))\s*((\*))
      captures:
        '1': storage.type.function.js
        '2': storage.type.function.generator.es
        '3': keyword.generator.asterisk.js
        '4': storage.modifier.generator.asterisk.es
      set: moduleDeclaration_DEFAULT_AFTER_ASTERISK
    - match: '((function)){{idEnd}}'
      captures:
        '1': storage.type.function.js
        '2': storage.type.function.es
      set: moduleDeclaration_DEFAULT_AFTER_FUNCTION
    - match: '((async))\s*((function)){{idEnd}}((\s*\*))?'
      captures:
        '1': storage.type.js
        '2': storage.modifier.async.es
        '3': storage.type.function.js
        '4': storage.type.function.async.es
        '5': keyword.generator.asterisk.js
        '6': storage.modifier.generator.asterisk.method.es
      set: moduleDeclaration_DEFAULT_AFTER_ASYNC_FUNCTION
    - match: ((@))
      captures:
        '1': punctuation.definition.tag.js
        '2': punctuation.definition.decorator.es
      set:
        - moduleDeclaration_DEFAULT_AFTER_DECORATOR
        - decoratorExpression
    - match: '{{PLA_anything}}(?=\s*\$\{)'
      set: assignmentExpression_INTERP
    - match: '{{PLA_anything}}'
      set: assignmentExpression
  moduleDeclaration_DEFAULT_AFTER_DECORATOR:
    - match: 'class{{idEnd}}'
      scope: storage.type.class.es
      set: moduleDeclaration_DEFAULT_AFTER_CLASS
    - match: ((@))
      captures:
        '1': punctuation.definition.tag.js
        '2': punctuation.definition.decorator.es
      push:
        - decoratorExpression
    - include: other_illegal_pop
  moduleDeclaration_DEFAULT_AFTER_CLASS:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.class.body.begin.es
        '2': meta.brace.curly.js
      set: classDeclaration_AFTER_BRACE
    - match: '((extends)){{idEnd}}(?=\s*\$\{)'
      captures:
        '1': storage.type.extends.js
        '2': storage.modifier.extends.es
      set:
        - classDeclaration_AFTER_HERITAGE
        - assignmentExpression_INTERP
    - match: '((extends)){{idEnd}}'
      captures:
        '1': storage.type.extends.js
        '2': storage.modifier.extends.es
      set:
        - classDeclaration_AFTER_HERITAGE
        - assignmentExpression
    - match: '(({{identifier}}))'
      captures:
        '1': entity.name.class.js
        '2': entity.name.class.es
      set: classDeclaration_AFTER_NAME
    - include: other_illegal_pop
  moduleDeclaration_DEFAULT_AFTER_ASTERISK:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.generator.begin.es
        '2': meta.brace.round.js
      set:
        - generatorDeclaration_AFTER_PARAMS
        - parameters
    - match: '{{identifier}}'
      scope: entity.name.function.generator.es
      set: generatorDeclaration_AFTER_NAME
    - include: other_illegal_pop
  moduleDeclaration_DEFAULT_AFTER_FUNCTION:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.function.begin.es
        '2': meta.brace.round.js
      set:
        - functionDeclaration_AFTER_PARAMS
        - parameters
    - match: '{{allThreeIDs}}'
      captures:
        '1': entity.name.function.allCap.es
        '2': entity.name.function.initCap.es
        '3': entity.name.function.es
      set: functionDeclaration_AFTER_NAME
    - include: other_illegal_pop
  moduleDeclaration_DEFAULT_AFTER_ASYNC_FUNCTION:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.function.async.begin.es
        '2': meta.brace.round.js
      set:
        - asyncDeclaration_AFTER_PARAMS
        - parameters
    - match: '{{allThreeIDs}}'
      scope: entity.name.function.async.es
      set: asyncDeclaration_AFTER_NAME
    - include: other_illegal_pop
  moduleDeclaration_BEFORE_FROM:
    - match: '((from)){{idEnd}}'
      captures:
        '1': keyword.operator.module.js
        '2': storage.modifier.module.from.es
      set: moduleDeclaration_BEFORE_SPECIFIER
    - include: other_illegal_pop
  moduleDeclaration_BEFORE_SPECIFIER:
    - match: ''''
      scope: punctuation.definition.string.quoted.single.begin.es
      set: stringSingle_AFTER_OPEN
    - match: '"'
      scope: punctuation.definition.string.quoted.double.begin.es
      set: stringDouble_AFTER_OPEN
    - include: other_illegal_pop
  moduleDeclaration_EXPORT_BINDING_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.module-binding.end.es
        '2': meta.brace.curly.js
      set: moduleDeclaration_EXPORT_AFTER_BINDING
    - match: '({{identifier}})\s+((as)){{idEnd}}'
      captures:
        '1': variable.other.readwrite.export.es
        '2': keyword.operator.module.js
        '3': storage.modifier.module.as.es
      set: moduleDeclaration_EXPORT_BINDING_AFTER_AS
    - match: '(default)\s+((as)){{idEnd}}'
      captures:
        '1': storage.modifier.module.default.es
        '2': keyword.operator.module.js
        '3': storage.modifier.module.as.es
      set: moduleDeclaration_EXPORT_BINDING_AFTER_AS
    - match: '{{identifier}}'
      scope: variable.other.readwrite.export.es
      set: moduleDeclaration_AFTER_EXPORT_BINDING_SPECIFIER_AMBIG
    - include: other_illegal
  moduleDeclaration_EXPORT_BINDING_AFTER_AS:
    - match: '{{identifierName}}(?=\$\{)'
      scope: entity.name.module.export.es
      set: moduleDeclaration_AFTER_EXPORT_BINDING_SPECIFIER_INTERP
    - match: '{{identifierName}}'
      scope: entity.name.module.export.es
      set: moduleDeclaration_AFTER_EXPORT_BINDING_SPECIFIER
    - include: other_illegal_pop
  moduleDeclaration_AFTER_EXPORT_BINDING_SPECIFIER:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.module-binding.end.es
        '2': meta.brace.curly.js
      set: moduleDeclaration_EXPORT_AFTER_BINDING
    - match: '((,))'
      captures:
        '1': punctuation.separator.module-binding.es
        '2': meta.delimiter.comma.js
      set: moduleDeclaration_EXPORT_BINDING_AFTER_BRACE
    - include: other_illegal
  moduleDeclaration_AFTER_EXPORT_BINDING_SPECIFIER_AMBIG:
    - match: '((as)){{idEnd}}'
      captures:
        '1': keyword.operator.module.js
        '2': storage.modifier.module.as.es
      set: moduleDeclaration_EXPORT_BINDING_AFTER_AS
    - include: moduleDeclaration_AFTER_EXPORT_BINDING_SPECIFIER
  moduleDeclaration_EXPORT_AFTER_BINDING:
    - match: ;
      scope: punctuation.terminator.statement.es
      pop: true
    - match: '((from)){{idEnd}}'
      captures:
        '1': keyword.operator.module.js
        '2': storage.modifier.module.from.es
      set: moduleDeclaration_BEFORE_SPECIFIER
    - include: else_pop
  moduleDeclaration_AFTER_IMPORT:
    - match: ((\*))
      captures:
        '1': keyword.operator.module.js
        '2': storage.modifier.module.namespace.es
      set: moduleDeclaration_IMPORT_BINDING_AFTER_ASTERISK
    - match: '((\{))'
      captures:
        '1': punctuation.definition.module-binding.begin.es
        '2': meta.brace.curly.js
      set: moduleDeclaration_IMPORT_BINDING_AFTER_BRACE
    - match: '{{identifier}}'
      scope: variable.other.readwrite.import.es
      set: moduleDeclaration_IMPORT_AFTER_IDENTIFIER
    - include: moduleDeclaration_BEFORE_SPECIFIER
  moduleDeclaration_IMPORT_AFTER_IDENTIFIER:
    - match: '((,))'
      captures:
        '1': punctuation.separator.module-binding.es
        '2': meta.delimiter.comma.js
      set: moduleDeclaration_IMPORT_AFTER_IDENTIFIER_COMMA
    - match: '((from)){{idEnd}}'
      captures:
        '1': keyword.operator.module.js
        '2': storage.modifier.module.from.es
      set: moduleDeclaration_BEFORE_SPECIFIER
  moduleDeclaration_IMPORT_AFTER_IDENTIFIER_COMMA:
    - match: ((\*))
      captures:
        '1': keyword.operator.module.js
        '2': storage.modifier.module.namespace.es
      set: moduleDeclaration_IMPORT_BINDING_AFTER_ASTERISK
    - match: '((\{))'
      captures:
        '1': punctuation.definition.module-binding.begin.es
        '2': meta.brace.curly.js
      set: moduleDeclaration_IMPORT_BINDING_AFTER_BRACE
    - include: other_illegal_pop
  moduleDeclaration_IMPORT_BINDING_AFTER_ASTERISK:
    - match: '((as)){{idEnd}}'
      captures:
        '1': keyword.operator.module.js
        '2': storage.modifier.module.as.es
      set: moduleDeclaration_IMPORT_BINDING_AFTER_AS
    - include: other_illegal_pop
  moduleDeclaration_IMPORT_BINDING_AFTER_AS:
    - match: '{{identifier}}'
      scope: variable.other.readwrite.import.es
      set: moduleDeclaration_BEFORE_FROM
    - include: other_illegal_pop
  moduleDeclaration_IMPORT_BINDING_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.module-binding.end.es
        '2': meta.brace.curly.js
      set: moduleDeclaration_BEFORE_FROM
    - match: '({{identifierName}})\s+((as)){{idEnd}}'
      captures:
        '1': entity.name.module.import.es
        '2': keyword.operator.module.js
        '3': storage.modifier.module.as.es
      set: moduleDeclaration_IMPORT_BINDING_AFTER_AS_BEFORE_BRACE_CLOSE
    - match: '{{identifier}}'
      scope: variable.other.readwrite.import.es
      set: moduleDeclaration_AFTER_IMPORT_BINDING_SPECIFIER_AMBIG
    - include: other_illegal
  moduleDeclaration_IMPORT_BINDING_AFTER_AS_BEFORE_BRACE_CLOSE:
    - match: '{{identifier}}'
      scope: variable.other.readwrite.import.es
      set: moduleDeclaration_AFTER_IMPORT_BINDING_SPECIFIER
    - include: other_illegal_pop
  moduleDeclaration_AFTER_IMPORT_BINDING_SPECIFIER:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.module-binding.end.es
        '2': meta.brace.curly.js
      set: moduleDeclaration_BEFORE_FROM
    - match: '((,))'
      captures:
        '1': punctuation.separator.module-binding.es
        '2': meta.delimiter.comma.js
      set: moduleDeclaration_IMPORT_BINDING_AFTER_BRACE
    - include: other_illegal
  moduleDeclaration_AFTER_IMPORT_BINDING_SPECIFIER_AMBIG:
    - match: '((as)){{idEnd}}'
      captures:
        '1': keyword.operator.module.js
        '2': storage.modifier.module.as.es
      set: moduleDeclaration_IMPORT_BINDING_AFTER_AS_BEFORE_BRACE_CLOSE
    - include: moduleDeclaration_AFTER_IMPORT_BINDING_SPECIFIER
  expression:
    - match: '{{PLA_anything}}(?=\s*\$\{)'
      set:
        - expression_AFTER_AE
        - assignmentExpression_INTERP
    - match: '{{PLA_anything}}'
      set:
        - expression_AFTER_AE
        - assignmentExpression
  expression_AFTER_AE:
    - match: ',(?=\s*\$\{)'
      scope: keyword.operator.comma.es
      push: assignmentExpression_INTERP
    - match: ','
      scope: keyword.operator.comma.es
      push: assignmentExpression
    - include: else_pop
  decoratorExpression:
    - match: '(?!async{{idEnd}})(({{identifier}}))(?!\s*=){{idEnd}}'
      captures:
        '1': entity.name.tag.js
        '2': variable.other.readwrite.decorator.es
      set: ae_AFTER_IDENTIFIER
    - include: assignmentExpression
  assignmentExpression:
    - include: assignmentExpression_CORE
    - include: other_illegal_pop
  assignmentExpression_CORE:
    - include: syntax_OPEN
    - include: ae_LITERAL_VALUES
    - include: ae_NUMBERS
    - include: ae_STRING_REGEX
    - include: ae_ARRAY_COMPREHENSION
    - include: ae_OBJECT_ARRAY_BINDING
    - include: ae_OBJECT_ARRAY_LITERAL
    - include: ae_YIELD_NEW
    - include: ae_FUNCTION_GENERATOR_CLASS
    - include: ae_PREFIX_OPS
    - include: ae_ARROW
    - include: ae_IDENTIFIERS
    - include: ae_GENERATOR_COMPREHENSION
    - include: ae_PARENTHESIZED
    - include: ae_DO
  ae_AFTER_IDENTIFIER:
    - match: =>
      scope: storage.type.function.arrow.es
      set: ae_ARROW_AFTER_ARROW
    - include: ae_AFTER_THING
  ae_AFTER_THING:
    - match: ((\())
      captures:
        '1': punctuation.definition.arguments.begin.es
        '2': meta.brace.round.js
      push: arguments
    - match: \\`
      scope: punctuation.definition.string.interpolated.begin.es
      set:
        - ae_AFTER_VALUE
        - templateString_AFTER_OPEN
    - include: syntax_OPEN
    - include: ae_POSTFIX_OPS
    - include: ae_INFIX_OPS_ASSIGNMENT
    - include: ae_AFTER_VALUE
  ae_AFTER_VALUE:
    - match: '\.(?=\s*[\}\)\]])'
      scope: invalid.illegal.token
      pop: true
    - match: \.
      scope: keyword.operator.accessor.es
      set: ae_AFTER_ACCESSOR_OPERATOR
    - match: |-
        (?x) (?=
          \[
            [^\[\]]+
          \]
          \s* \( [^\)]* \) \s* \{
        )
      pop: true
    - match: '((\[))(?=\s*\$\{)'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - ae_AFTER_THING
        - computedProp_AFTER_AE
        - assignmentExpression_INTERP
    - match: '((\[))'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - ae_AFTER_THING
        - computedProp_AFTER_AE
        - assignmentExpression
    - include: ae_INFIX_OPS
    - include: ae_AFTER_POSTFIX
  ae_AFTER_POSTFIX:
    - include: ae_INFIX_OPS
    - include: else_pop
  ae_AFTER_ACCESSOR_OPERATOR:
    - match: '((({{identifierAllCaps}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.property.allCap.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: '((({{identifierInitCap}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.property.initCap.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: '((({{identifierName}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.property.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: '(((#{{identifierName}})))\s*((\())'
      captures:
        '1': variable.language.private.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: '(prototype){{idEnd}}'
      scope: variable.other.readwrite.property.prototype.es
      captures:
        '1': variable.language.prototype.es
      set: ae_AFTER_THING
    - match: '(__proto__){{idEnd}}'
      scope: variable.other.readwrite.property.proto.es
      captures:
        '1': variable.language.proto.es
      set: ae_AFTER_THING
    - match: '(({{identifierName}}))(?=\s*=\s*async\s+function\b)'
      captures:
        '1': variable.other.readwrite.property.es
        '2': entity.name.method.async.es
      set: ae_AFTER_THING
    - match: '((#{{identifierName}}))(?=\s*=\s*async\s+function\b)'
      captures:
        '1': variable.language.private.es
        '2': entity.name.method.async.es
      set: ae_AFTER_THING
    - match: '(({{identifierName}}))(?=\s*=\s*function\s*\*)'
      captures:
        '1': variable.other.readwrite.property.es
        '2': entity.name.method.generator.es
      set: ae_AFTER_THING
    - match: '((#{{identifierName}}))(?=\s*=\s*function\s*\*)'
      captures:
        '1': variable.language.private.es
        '2': entity.name.method.generator.es
      set: ae_AFTER_THING
    - match: '(({{identifierName}}))(?=\s*=\s*function\b)'
      captures:
        '1': variable.other.readwrite.property.es
        '2': entity.name.method.es
      set: ae_AFTER_THING
    - match: '((#{{identifierName}}))(?=\s*=\s*function\b)'
      captures:
        '1': variable.language.private.es
        '2': entity.name.method.es
      set: ae_AFTER_THING
    - match: >-
        (({{identifierName}}))\s*(=)\s*(\()(?=(?<parens>[^\(\)]|\(\g<parens>*\))*\)\s*=>)
      captures:
        '1': variable.other.readwrite.property.es
        '2': entity.name.method.es
        '3': keyword.operator.assignment.es
        '4': punctuation.definition.parameters.function.arrow.begin.es
      set:
        - ae_ARROW_AFTER_PARAMS
        - parameters
    - match: >-
        ((#{{identifierName}}))\s*(=)\s*(\()(?=(?<parens>[^\(\)]|\(\g<parens>*\))*\)\s*=>)
      captures:
        '1': variable.language.private.es
        '2': entity.name.method.es
        '3': keyword.operator.assignment.es
        '4': punctuation.definition.parameters.function.arrow.begin.es
      set:
        - ae_ARROW_AFTER_PARAMS
        - parameters
    - match: '(({{identifierName}}))\s*(=)\s*({{identifier}})\s*(=>)'
      captures:
        '1': variable.other.readwrite.property.es
        '2': entity.name.method.es
        '3': keyword.operator.assignment.es
        '4': variable.parameter.es
        '5': storage.type.function.arrow.es
      set: ae_ARROW_AFTER_ARROW
    - match: '((#{{identifierName}}))\s*(=)\s*({{identifier}})\s*(=>)'
      captures:
        '1': variable.language.private.es
        '2': entity.name.method.es
        '3': keyword.operator.assignment.es
        '4': variable.parameter.es
        '5': storage.type.function.arrow.es
      set: ae_ARROW_AFTER_ARROW
    - match: '(({{identifierName}}))\s*(=)\s*((async))\s+({{identifier}})\s*(=>)'
      captures:
        '1': variable.other.readwrite.property.es
        '2': entity.name.method.async.es
        '3': keyword.operator.assignment.es
        '4': storage.type.js
        '5': storage.modifier.async.expression.es
        '6': variable.parameter.es
        '7': storage.type.function.arrow.es
      set: ae_ASYNC_ARROW_AFTER_ARROW
    - match: '((#{{identifierName}}))\s*(=)\s*((async))\s+({{identifier}})\s*(=>)'
      captures:
        '1': variable.language.private.es
        '2': entity.name.method.async.es
        '3': keyword.operator.assignment.es
        '4': storage.type.js
        '5': storage.modifier.async.expression.es
        '6': variable.parameter.es
        '7': storage.type.function.arrow.es
      set: ae_ASYNC_ARROW_AFTER_ARROW
    - match: '(({{identifierName}}))\s*(=)\s*((async))\s*(\()'
      captures:
        '1': variable.other.readwrite.property.es
        '2': entity.name.method.async.es
        '3': keyword.operator.assignment.es
        '4': storage.type.js
        '5': storage.modifier.async.expression.es
        '6': punctuation.definition.parameters.function.arrow.begin.es
      set:
        - ae_ASYNC_ARROW_AFTER_PARAMS
        - parameters
    - match: '((#{{identifierName}}))\s*(=)\s*((async))\s*(\()'
      captures:
        '1': variable.language.private.es
        '2': entity.name.method.async.es
        '3': keyword.operator.assignment.es
        '4': storage.type.js
        '5': storage.modifier.async.expression.es
        '6': punctuation.definition.parameters.function.arrow.begin.es
      set:
        - ae_ASYNC_ARROW_AFTER_PARAMS
        - parameters
    - match: '{{identifierName}}(?=\$\{)'
      scope: variable.other.readwrite.property.es
      set: ae_AFTER_THING_INTERP
    - match: '{{identifierName}}'
      scope: variable.other.readwrite.property.es
      set: ae_AFTER_THING
    - match: '#{{identifierName}}(?=\$\{)'
      scope: variable.language.private.es
      set: ae_AFTER_THING_INTERP
    - match: '#{{identifierName}}'
      scope: variable.language.private.es
      set: ae_AFTER_THING
    - match: '(?=[\}\)\]])'
      pop: true
    - include: other_illegal_pop
  ae_ARRAY_COMPREHENSION:
    - match: '((\[))\s*(for){{idEnd}}'
      captures:
        '1': punctuation.definition.comprehension.array.begin.es
        '2': meta.brace.square.js
        '3': keyword.control.loop.for.comprehension.array.es
      set: ae_ARRAY_COMPREHENSION_AFTER_FOR
  ae_ARRAY_COMPREHENSION_AFTER_FOR:
    - match: '((\())(?=\s*\$\{)'
      captures:
        '1': punctuation.definition.expression.loop.comprehension.array.begin.es
        '2': meta.brace.round.js
      set:
        - ae_ARRAY_COMPREHENSION_AFTER_LHSE
        - assignmentExpression_INTERP
    - match: ((\())
      captures:
        '1': punctuation.definition.expression.loop.comprehension.array.begin.es
        '2': meta.brace.round.js
      set:
        - ae_ARRAY_COMPREHENSION_AFTER_LHSE
        - assignmentExpression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_ARRAY_COMPREHENSION_BEFORE_CLOSE
  ae_ARRAY_COMPREHENSION_AFTER_LHSE:
    - match: 'of{{idEnd}}'
      scope: keyword.control.loop.of.comprehension.array.es
      set:
        - ae_ARRAY_COMPREHENSION_AFTER_EXP_BODY
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_ARRAY_COMPREHENSION_AFTER_EXP_BODY
  ae_ARRAY_COMPREHENSION_AFTER_EXP_BODY:
    - match: ((\)))
      captures:
        '1': punctuation.definition.expression.loop.comprehension.array.begin.es
        '2': meta.brace.round.js
      set: ae_ARRAY_COMPREHENSION_AFTER_EXP
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_ARRAY_COMPREHENSION_BEFORE_CLOSE
  ae_ARRAY_COMPREHENSION_AFTER_EXP:
    - match: 'if{{idEnd}}'
      scope: keyword.control.loop.conditional.if.comprehension.array.es
      set: ae_ARRAY_COMPREHENSION_AFTER_IF
    - match: 'for{{idEnd}}'
      scope: keyword.control.loop.for.comprehension.array.es
      set: ae_ARRAY_COMPREHENSION_AFTER_FOR
    - match: '{{PLA_anything}}'
      set:
        - ae_ARRAY_COMPREHENSION_BEFORE_CLOSE
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_ARRAY_COMPREHENSION_BEFORE_CLOSE
  ae_ARRAY_COMPREHENSION_AFTER_IF:
    - match: ((\())
      captures:
        '1': >-
          punctuation.definition.expression.conditional.comprehension.array.begin.es
        '2': meta.brace.round.js
      set:
        - ae_ARRAY_COMPREHENSION_AFTER_IF_EXP
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_ARRAY_COMPREHENSION_AFTER_IF_EXP
  ae_ARRAY_COMPREHENSION_AFTER_IF_EXP:
    - match: ((\)))
      captures:
        '1': >-
          punctuation.definition.expression.conditional.comprehension.array.begin.es
        '2': meta.brace.round.js
      set: ae_ARRAY_COMPREHENSION_AFTER_EXP
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_ARRAY_COMPREHENSION_BEFORE_CLOSE
  ae_ARRAY_COMPREHENSION_BEFORE_CLOSE:
    - match: '((\]))'
      captures:
        '1': punctuation.definition.comprehension.array.end.es
        '2': meta.brace.square.js
      set: ae_AFTER_VALUE
    - include: other_illegal
  ae_ARROW:
    - match: '(?x) \( (?= (?<parens> [^\(\)] | \( \g<parens>* \) )* \)\s*=> )'
      scope: punctuation.definition.parameters.function.arrow.begin.es
      set:
        - ae_ARROW_AFTER_PARAMS
        - parameters
    - match: ((async))\s*(\()
      captures:
        '1': storage.type.js
        '2': storage.modifier.async.expression.es
        '3': punctuation.definition.parameters.function.async.arrow.begin.es
      set:
        - ae_ASYNC_ARROW_AFTER_PARAMS
        - parameters
  ae_ARROW_AFTER_PARAMS:
    - match: \)
      scope: punctuation.definition.parameters.function.arrow.end.es
      set: ae_ARROW_BEFORE_ARROW
    - include: other_illegal_pop
  ae_ARROW_BEFORE_ARROW:
    - match: =>
      scope: storage.type.function.arrow.es
      set: ae_ARROW_AFTER_ARROW
    - include: other_illegal_pop
  ae_ARROW_AFTER_ARROW:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.function.arrow.body.begin.es
        '2': meta.brace.curly.js
      set: ae_ARROW_AFTER_BRACE
    - match: '{{PLA_anything}}(?=\s*\$\{)'
      set: assignmentExpression_INTERP
    - match: '{{PLA_anything}}'
      set: assignmentExpression
  ae_ARROW_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.function.arrow.body.end.es
        '2': meta.brace.curly.js
      set: ae_AFTER_THING
    - include: useStrict
    - include: statements
    - include: other_illegal
  ae_ASYNC_ARROW_AFTER_PARAMS:
    - match: \)
      scope: punctuation.definition.parameters.function.async.arrow.end.es
      set: ae_ASYNC_ARROW_BEFORE_ARROW
    - include: other_illegal_pop
  ae_ASYNC_ARROW_BEFORE_ARROW:
    - match: =>
      scope: storage.type.function.async.arrow.es
      set: ae_ASYNC_ARROW_AFTER_ARROW
    - include: other_illegal_pop
  ae_ASYNC_ARROW_AFTER_ARROW:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.function.async.arrow.body.begin.es
        '2': meta.brace.curly.js
      set: ae_ASYNC_ARROW_AFTER_BRACE
    - match: '{{PLA_anything}}(?=\s*\$\{)'
      set: assignmentExpression_INTERP
    - match: '{{PLA_anything}}'
      set: assignmentExpression
  ae_ASYNC_ARROW_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.function.async.arrow.body.end.es
        '2': meta.brace.curly.js
      set: ae_AFTER_THING
    - include: useStrict
    - include: statements
    - include: other_illegal
  ae_CLASS_AFTER_CLASS:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.class.body.begin.es
        '2': meta.brace.curly.js
      set:
        - ae_AFTER_THING
        - classDeclaration_AFTER_BRACE
    - match: '((extends)){{idEnd}}(?=\s*\$\{)'
      captures:
        '1': storage.type.extends.js
        '2': storage.modifier.extends.es
      set:
        - ae_AFTER_THING
        - classDeclaration_AFTER_HERITAGE
        - assignmentExpression_INTERP
    - match: '((extends)){{idEnd}}'
      captures:
        '1': storage.type.extends.js
        '2': storage.modifier.extends.es
      set:
        - ae_AFTER_THING
        - classDeclaration_AFTER_HERITAGE
        - assignmentExpression
    - match: '(({{identifier}}))'
      captures:
        '1': entity.name.class.js
        '2': entity.name.class.es
      set:
        - ae_AFTER_THING
        - classDeclaration_AFTER_NAME
    - include: other_illegal_pop
  ae_DO:
    - match: 'do{{idEnd}}'
      scope: keyword.control.do-expression.do.es
      set:
        - ae_AFTER_THING
        - ae_DO_AFTER_DO
  ae_DO_AFTER_DO:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.block.do-expression.begin.es
        '2': meta.brace.curly.js
      set: ae_DO_AFTER_BRACE
    - include: other_illegal_pop
  ae_DO_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.block.do-expression.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: statements
  ae_FUNCTION_GENERATOR_CLASS:
    - match: function\s*\.\s*sent
      scope: variable.language.function-sent.es
      set: ae_AFTER_THING
    - match: ((function))\s*((\*))
      captures:
        '1': storage.type.function.js
        '2': storage.type.function.generator.expression.es
        '3': keyword.generator.asterisk.js
        '4': storage.modifier.generator.asterisk.expression.es
      set: ae_GENERATOR_AFTER_ASTERISK
    - match: '\s*((function)){{idEnd}}'
      captures:
        '1': storage.type.function.js
        '2': storage.type.function.expression.es
      set: ae_FUNCTION_AFTER_FUNCTION
    - match: '((async))\s+((function)){{idEnd}}'
      captures:
        '1': storage.type.js
        '2': storage.modifier.async.expression.es
        '3': storage.type.function.js
        '4': storage.type.function.async.expression.es
      set:
        - - include: ae_ASYNC_AFTER_FUNCTION
        - - match: ((\*))
            captures:
              '1': keyword.generator.asterisk.js
              '2': storage.modifier.generator.asterisk.method.es
            pop: true
          - include: else_pop
    - match: 'class{{idEnd}}'
      scope: storage.type.class.expression.es
      set: ae_CLASS_AFTER_CLASS
  ae_FUNCTION_AFTER_FUNCTION:
    - match: \(
      scope: punctuation.definition.parameters.function.begin.es
      set:
        - ae_AFTER_THING
        - functionDeclaration_AFTER_PARAMS
        - parameters
    - match: '{{identifier}}'
      scope: entity.name.function.es
      set:
        - ae_AFTER_THING
        - functionDeclaration_AFTER_NAME
    - include: other_illegal_pop
  ae_ASYNC_AFTER_FUNCTION:
    - match: \(
      scope: punctuation.definition.parameters.function.async.begin.es
      set:
        - ae_AFTER_THING
        - asyncDeclaration_AFTER_PARAMS
        - parameters
    - match: '{{identifier}}'
      scope: entity.name.function.async.es
      set:
        - ae_AFTER_THING
        - asyncDeclaration_AFTER_NAME
    - include: other_illegal_pop
  ae_GENERATOR_AFTER_ASTERISK:
    - match: \(
      scope: punctuation.definition.parameters.generator.begin.es
      set:
        - ae_AFTER_THING
        - generatorDeclaration_AFTER_PARAMS
        - parameters
    - match: '{{identifier}}'
      scope: entity.name.function.generator.es
      set:
        - ae_AFTER_THING
        - generatorDeclaration_AFTER_NAME
    - include: other_illegal_pop
  ae_GENERATOR_COMPREHENSION:
    - match: '((\())\s*(for){{idEnd}}'
      captures:
        '1': punctuation.definition.comprehension.generator.begin.es
        '2': meta.brace.round.js
        '3': keyword.control.loop.for.comprehension.generator.es
      set: ae_GENERATOR_COMPREHENSION_AFTER_FOR
  ae_GENERATOR_COMPREHENSION_AFTER_FOR:
    - match: '((\())(?=\s*\$\{)'
      captures:
        '1': >-
          punctuation.definition.expression.loop.comprehension.generator.begin.es
        '2': meta.brace.round.js
      set:
        - ae_GENERATOR_COMPREHENSION_AFTER_LHSE
        - assignmentExpression_INTERP
    - match: ((\())
      captures:
        '1': >-
          punctuation.definition.expression.loop.comprehension.generator.begin.es
        '2': meta.brace.round.js
      set:
        - ae_GENERATOR_COMPREHENSION_AFTER_LHSE
        - assignmentExpression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_GENERATOR_COMPREHENSION_BEFORE_CLOSE
  ae_GENERATOR_COMPREHENSION_AFTER_LHSE:
    - match: 'of{{idEnd}}'
      scope: keyword.control.loop.of.comprehension.generator.es
      set:
        - ae_GENERATOR_COMPREHENSION_AFTER_EXP_BODY
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_GENERATOR_COMPREHENSION_AFTER_EXP_BODY
  ae_GENERATOR_COMPREHENSION_AFTER_EXP_BODY:
    - match: ((\)))
      captures:
        '1': >-
          punctuation.definition.expression.loop.comprehension.generator.begin.es
        '2': meta.brace.round.js
      set: ae_GENERATOR_COMPREHENSION_AFTER_EXP
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_GENERATOR_COMPREHENSION_BEFORE_CLOSE
  ae_GENERATOR_COMPREHENSION_AFTER_EXP:
    - match: 'if{{idEnd}}'
      scope: keyword.control.loop.conditional.if.comprehension.generator.es
      set: ae_GENERATOR_COMPREHENSION_AFTER_IF
    - match: 'for{{idEnd}}'
      scope: keyword.control.loop.for.comprehension.generator.es
      set: ae_GENERATOR_COMPREHENSION_AFTER_FOR
    - match: '{{PLA_anything}}'
      set:
        - ae_GENERATOR_COMPREHENSION_BEFORE_CLOSE
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_GENERATOR_COMPREHENSION_BEFORE_CLOSE
  ae_GENERATOR_COMPREHENSION_AFTER_IF:
    - match: ((\())
      captures:
        '1': >-
          punctuation.definition.expression.conditional.comprehension.generator.begin.es
        '2': meta.brace.round.js
      set:
        - ae_GENERATOR_COMPREHENSION_AFTER_IF_EXP
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_GENERATOR_COMPREHENSION_AFTER_IF_EXP
  ae_GENERATOR_COMPREHENSION_AFTER_IF_EXP:
    - match: ((\)))
      captures:
        '1': >-
          punctuation.definition.expression.conditional.comprehension.generator.begin.es
        '2': meta.brace.round.js
      set: ae_GENERATOR_COMPREHENSION_AFTER_EXP
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_GENERATOR_COMPREHENSION_BEFORE_CLOSE
  ae_GENERATOR_COMPREHENSION_BEFORE_CLOSE:
    - match: ((\)))
      captures:
        '1': punctuation.definition.comprehension.generator.end.es
        '2': meta.brace.round.js
      set: ae_AFTER_THING
    - match: \(
      scope: invalid.illegal.token.es
      set: ae_GENERATOR_COMPREHENSION_AFTER_EXP_BODY
    - include: other_illegal
  ae_IDENTIFIERS:
    - include: ae_IDENTIFIERS_LANGUAGE
    - match: >-
        (({{identifier}}))\s*(=)\s*(\()(?=(?<parens>[^\(\)]|\(\g<parens>*\))*\)\s*=>)
      captures:
        '1': variable.other.readwrite.es
        '2': entity.name.function.arrow.es
        '3': keyword.operator.assignment.es
        '4': punctuation.definition.parameters.function.arrow.begin.es
      set:
        - ae_ARROW_AFTER_PARAMS
        - parameters
    - match: '(({{identifier}}))\s*(=)\s*({{identifier}})\s*(=>)'
      captures:
        '1': variable.other.readwrite.es
        '2': entity.name.function.arrow.es
        '3': keyword.operator.assignment.es
        '4': variable.parameter.es
        '5': storage.type.function.arrow.es
      set: ae_ARROW_AFTER_ARROW
    - match: '(({{identifier}}))\s*(=)\s*((async))\s+({{identifier}})\s*(=>)'
      captures:
        '1': variable.other.readwrite.es
        '2': entity.name.function.async.arrow.es
        '3': keyword.operator.assignment.es
        '4': storage.type.js
        '5': storage.modifier.async.expression.es
        '6': variable.parameter.es
        '7': storage.type.function.arrow.es
      set: ae_ASYNC_ARROW_AFTER_ARROW
    - match: '(({{identifier}}))\s*(=)\s*((async))\s*(\()'
      captures:
        '1': variable.other.readwrite.es
        '2': entity.name.function.async.arrow.es
        '3': keyword.operator.assignment.es
        '4': storage.type.js
        '5': storage.modifier.async.expression.es
        '6': punctuation.definition.parameters.function.arrow.begin.es
      set:
        - ae_ASYNC_ARROW_AFTER_PARAMS
        - parameters
    - match: '(({{identifier}}))\s*(=)\s*(?=function\s*\*)(?=\s*\$\{)'
      captures:
        '1': variable.other.readwrite.es
        '2': entity.name.function.generator.es
        '3': keyword.operator.assignment.es
      set: assignmentExpression_INTERP
    - match: '(({{identifier}}))\s*(=)\s*(?=function\s*\*)'
      captures:
        '1': variable.other.readwrite.es
        '2': entity.name.function.generator.es
        '3': keyword.operator.assignment.es
      set: assignmentExpression
    - match: '(({{identifier}}))\s*(=)\s*(?=function{{idEnd}})(?=\s*\$\{)'
      captures:
        '1': variable.other.readwrite.es
        '2': entity.name.function.es
        '3': keyword.operator.assignment.es
      set: assignmentExpression_INTERP
    - match: '(({{identifier}}))\s*(=)\s*(?=function{{idEnd}})'
      captures:
        '1': variable.other.readwrite.es
        '2': entity.name.function.es
        '3': keyword.operator.assignment.es
      set: assignmentExpression
    - match: '(({{identifier}}))\s*(=)\s*(?=async\s+function{{idEnd}})(?=\s*\$\{)'
      captures:
        '1': variable.other.readwrite.es
        '2': entity.name.function.async.es
        '3': keyword.operator.assignment.es
      set: assignmentExpression_INTERP
    - match: '(({{identifier}}))\s*(=)\s*(?=async\s+function{{idEnd}})'
      captures:
        '1': variable.other.readwrite.es
        '2': entity.name.function.async.es
        '3': keyword.operator.assignment.es
      set: assignmentExpression
    - match: '({{identifier}})\s*(=>)'
      captures:
        '1': variable.parameter.es
        '2': storage.type.function.arrow.es
      set: ae_ARROW_AFTER_ARROW
    - match: '((async))\s+({{identifier}})\s*(=>)'
      captures:
        '1': storage.type.js
        '2': storage.modifier.async.expression.es
        '3': variable.parameter.es
        '4': storage.type.function.arrow.es
      set: ae_ASYNC_ARROW_AFTER_ARROW
    - include: ae_IDENTIFIERS_INTRINSIC
    - include: ae_IDENTIFIERS_ENVIRONMENTAL
    - match: '((({{identifierAllCapsStrict}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.allCap.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: '{{identifierAllCapsStrict}}'
      scope: variable.other.readwrite.allCap.es
      set: ae_AFTER_IDENTIFIER
    - match: '((({{identifierInitCapStrict}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.initCap.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: '{{identifierInitCapStrict}}'
      scope: variable.other.readwrite.initCap.es
      set: ae_AFTER_IDENTIFIER
    - match: '((({{identifier}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: '{{identifier}}'
      scope: variable.other.readwrite.es
      set: ae_AFTER_IDENTIFIER
  ae_IDENTIFIERS_LANGUAGE:
    - match: (((this)))\s*((\())
      captures:
        '1': variable.language.this.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: 'this{{idEnd}}'
      scope: variable.language.this.es
      set: ae_AFTER_THING
    - match: (((super)))\s*((\())
      captures:
        '1': variable.language.super.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: 'super{{idEnd}}'
      scope: variable.language.super.es
      set: ae_AFTER_THING
    - match: import\s*\.\s*meta\b
      scope: variable.language.import-meta
      set: ae_AFTER_VALUE
    - match: import\s*\(
      scope: variable.language.import-dynamic
      set:
        - - match: \)
            scope: variable.language.import-dynamic
            set: ae_AFTER_THING
          - include: other_illegal
        - - include: assignmentExpression
    - match: 'arguments{{idEnd}}'
      scope: variable.language.arguments.es
      set: ae_AFTER_THING
  ae_IDENTIFIERS_ENVIRONMENTAL:
    - match: ((((Buffer)))\s*)((\())
      captures:
        '1': variable.other.readwrite.es
        '2': meta.instance.constructor entity.name.type.new
        '3': meta.instantiation.es
        '4': support.class.node.es
        '5': punctuation.definition.arguments.begin.es
        '6': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: '(Buffer){{idEnd}}'
      scope: variable.other.readwrite.es
      captures:
        '1': support.class.node.es
      set: ae_AFTER_THING
    - match: (((require)))\s*((\())
      captures:
        '1': meta.function-call
        '2': meta.invocation.es
        '3': support.function.node.require.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: '(global|GLOBAL|process|__(?:dir|file)name|require){{idEnd}}'
      scope: support.variable.node.es
      set: ae_AFTER_THING
    - match: '(?:(module)(?:(\.)(exports))?|(exports)){{idEnd}}'
      captures:
        '1': support.variable.node.module.es
        '2': keyword.operator.accessor.es
        '3': support.variable.node.module.es
        '4': support.variable.node.module.es
      set: ae_AFTER_THING
    - match: '(_|R){{idEnd}}'
      scope: support.variable.functional-library.es
      set: ae_AFTER_THING
    - match: '(?:\$|angular|Polymer|React(DOM)?){{idEnd}}'
      scope: support.variable.dom-library.es
      set: ae_AFTER_THING
    - match: '(document|frames|history|location|navigator|screen|window){{idEnd}}'
      scope: support.variable.dom.es
      set: ae_AFTER_THING
  ae_IDENTIFIERS_INTRINSIC:
    - match: '(?x) (((({{intrinsicConstructors}})))\s*)((\())'
      captures:
        '1': variable.other.readwrite.initCap.es
        '2': meta.instance.constructor
        '3': support.class.builtin.es
        '4': meta.invocation.es
        '5': punctuation.definition.arguments.begin.es
        '6': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: '(?x) ({{intrinsicConstructors}}){{idEnd}}'
      scope: variable.other.readwrite.es
      captures:
        '1': support.class.builtin.es
      set: ae_AFTER_THING
    - match: '(?:console|Intl|JSON|Math|SIMD){{idEnd}}'
      scope: support.variable.builtin.es
      set: ae_AFTER_THING
    - match: '(?x) ((( {{intrinsicFunctions}} )))\s*((\())'
      captures:
        '1': meta.function-call
        '2': meta.invocation.es
        '3': support.function.builtin.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_AFTER_THING
        - arguments
    - match: '(?x) ({{intrinsicFunctions}}){{idEnd}}'
      scope: support.function.builtin.es
      set: ae_AFTER_THING
  ae_INFIX_OPS:
    - match: \?
      scope: keyword.operator.ternary.if.es
      set: ae_TERNARY_AFTER_QUESTION
    - match: '\+(?!=)(?=\s*\$\{)'
      scope: keyword.operator.arithmetic.addition.es
      set: assignmentExpression_INTERP
    - match: \+(?!=)
      scope: keyword.operator.arithmetic.addition.es
      set: assignmentExpression
    - match: '-(?!=)(?=\s*\$\{)'
      scope: keyword.operator.arithmetic.subtraction.es
      set: assignmentExpression_INTERP
    - match: '-(?!=)'
      scope: keyword.operator.arithmetic.subtraction.es
      set: assignmentExpression
    - match: '\*\*(?!=)(?=\s*\$\{)'
      scope: keyword.operator.arithmetic.exponentiation.es
      set: assignmentExpression_INTERP
    - match: \*\*(?!=)
      scope: keyword.operator.arithmetic.exponentiation.es
      set: assignmentExpression
    - match: '\*(?=\s*\$\{)'
      scope: keyword.operator.arithmetic.multiplication.es
      set: assignmentExpression_INTERP
    - match: \*
      scope: keyword.operator.arithmetic.multiplication.es
      set: assignmentExpression
    - match: '\/(?!=)(?=\s*\$\{)'
      scope: keyword.operator.arithmetic.division.es
      set: assignmentExpression_INTERP
    - match: \/(?!=)
      scope: keyword.operator.arithmetic.division.es
      set: assignmentExpression
    - match: '%(?!=)(?=\s*\$\{)'
      scope: keyword.operator.arithmetic.modulo.es
      set: assignmentExpression_INTERP
    - match: '%(?!=)'
      scope: keyword.operator.arithmetic.modulo.es
      set: assignmentExpression
    - match: '===(?=\s*\$\{)'
      scope: keyword.operator.comparison.equality.strict.es
      set: assignmentExpression_INTERP
    - match: ===
      scope: keyword.operator.comparison.equality.strict.es
      set: assignmentExpression
    - match: '==(?=\s*\$\{)'
      scope: keyword.operator.comparison.equality.coercive.es
      set: assignmentExpression_INTERP
    - match: ==
      scope: keyword.operator.comparison.equality.coercive.es
      set: assignmentExpression
    - match: '!==(?=\s*\$\{)'
      scope: keyword.operator.comparison.non-equality.strict.es
      set: assignmentExpression_INTERP
    - match: '!=='
      scope: keyword.operator.comparison.non-equality.strict.es
      set: assignmentExpression
    - match: '!=(?=\s*\$\{)'
      scope: keyword.operator.comparison.non-equality.coercive.es
      set: assignmentExpression_INTERP
    - match: '!='
      scope: keyword.operator.comparison.non-equality.coercive.es
      set: assignmentExpression
    - match: '&&(?=\s*\$\{)'
      scope: keyword.operator.logical.and.es
      set: assignmentExpression_INTERP
    - match: '&&'
      scope: keyword.operator.logical.and.es
      set: assignmentExpression
    - match: '\|\|(?!=)(?=\s*\$\{)'
      scope: keyword.operator.logical.or.es
      set: assignmentExpression_INTERP
    - match: \|\|(?!=)
      scope: keyword.operator.logical.or.es
      set: assignmentExpression
    - match: '&(?!=)(?=\s*\$\{)'
      scope: keyword.operator.bitwise.logical.and.es
      set: assignmentExpression_INTERP
    - match: '&(?!=)'
      scope: keyword.operator.bitwise.logical.and.es
      set: assignmentExpression
    - match: '\|(?![=\|])'
      scope: keyword.operator.bitwise.logical.or.es
      set: assignmentExpression
    - match: \^(?!=)
      scope: keyword.operator.bitwise.logical.xor.es
      set: assignmentExpression
    - match: <<(?!=)
      scope: keyword.operator.bitwise.shift.left.es
      set: assignmentExpression
    - match: '>>>(?!=)'
      scope: keyword.operator.bitwise.shift.right.unsigned.es
      set: assignmentExpression
    - match: '>>(?![=>])'
      scope: keyword.operator.bitwise.shift.right.es
      set: assignmentExpression
    - match: <=
      scope: keyword.operator.relational.lte.es
      set: assignmentExpression
    - match: <
      scope: keyword.operator.relational.lt.es
      set: assignmentExpression
    - match: '>='
      scope: keyword.operator.relational.gte.es
      set: assignmentExpression
    - match: '>'
      scope: keyword.operator.relational.gt.es
      set: assignmentExpression
    - match: 'instanceof{{idEnd}}'
      scope: keyword.operator.relational.instanceof.es
      set: assignmentExpression
    - match: 'in{{idEnd}}'
      scope: keyword.operator.relational.in.es
      set: assignmentExpression
    - match: '::'
      scope: keyword.operator.bind.es
      set: assignmentExpression
  ae_INFIX_OPS_ASSIGNMENT:
    - match: '=(?!=)(?=\s*\$\{)'
      scope: keyword.operator.assignment.es
      set: assignmentExpression_INTERP
    - match: =(?!=)
      scope: keyword.operator.assignment.es
      set: assignmentExpression
    - match: '\+=(?=\s*\$\{)'
      scope: keyword.operator.assignment.augmented.arithmetic.addition.es
      set: assignmentExpression_INTERP
    - match: \+=
      scope: keyword.operator.assignment.augmented.arithmetic.addition.es
      set: assignmentExpression
    - match: '-=(?=\s*\$\{)'
      scope: keyword.operator.assignment.augmented.arithmetic.subtraction.es
      set: assignmentExpression_INTERP
    - match: '-='
      scope: keyword.operator.assignment.augmented.arithmetic.subtraction.es
      set: assignmentExpression
    - match: '\*\*=(?=\s*\$\{)'
      scope: keyword.operator.assignment.augmented.arithmetic.exponentiation.es
      set: assignmentExpression_INTERP
    - match: \*\*=
      scope: keyword.operator.assignment.augmented.arithmetic.exponentiation.es
      set: assignmentExpression
    - match: '\*=(?=\s*\$\{)'
      scope: keyword.operator.assignment.augmented.arithmetic.multiplication.es
      set: assignmentExpression_INTERP
    - match: \*=
      scope: keyword.operator.assignment.augmented.arithmetic.multiplication.es
      set: assignmentExpression
    - match: '\/=(?=\s*\$\{)'
      scope: keyword.operator.assignment.augmented.arithmetic.division.es
      set: assignmentExpression_INTERP
    - match: \/=
      scope: keyword.operator.assignment.augmented.arithmetic.division.es
      set: assignmentExpression
    - match: '%=(?=\s*\$\{)'
      scope: keyword.operator.assignment.augmented.arithmetic.modulo.es
      set: assignmentExpression_INTERP
    - match: '%='
      scope: keyword.operator.assignment.augmented.arithmetic.modulo.es
      set: assignmentExpression
    - match: \|\|=
      scope: keyword.operator.assignment.conditional.mallet.es
      set: assignmentExpression
    - match: '&='
      scope: keyword.operator.assignment.augmented.bitwise.logical.and.es
      set: assignmentExpression
    - match: \^=
      scope: keyword.operator.assignment.augmented.bitwise.logical.xor.es
      set: assignmentExpression
    - match: \|=
      scope: keyword.operator.assignment.augmented.bitwise.logical.or.es
      set: assignmentExpression
    - match: <<=
      scope: keyword.operator.assignment.augmented.bitwise.shift.left.es
      set: assignmentExpression
    - match: '>>>='
      scope: keyword.operator.assignment.augmented.bitwise.shift.right.unsigned.es
      set: assignmentExpression
    - match: '>>='
      scope: keyword.operator.assignment.augmented.bitwise.shift.right.es
      set: assignmentExpression
  ae_LITERAL_VALUES:
    - match: 'NaN(?![{{ID_Continue}}])'
      scope: constant.language.nan.es
      set: ae_AFTER_VALUE
    - match: 'null(?![{{ID_Continue}}])'
      scope: constant.language.null.es
      set: ae_AFTER_VALUE
    - match: 'true(?![{{ID_Continue}}])'
      scope: constant.language.boolean.true.es
      set: ae_AFTER_VALUE
    - match: 'false(?![{{ID_Continue}}])'
      scope: constant.language.boolean.false.es
      set: ae_AFTER_VALUE
    - match: 'Infinity(?![{{ID_Continue}}])'
      scope: constant.language.infinity.es
      set: ae_AFTER_VALUE
    - match: 'undefined(?![{{ID_Continue}}])'
      scope: constant.language.undefined.es
      set: ae_AFTER_VALUE
  ae_NUMBERS:
    - match: '{{decNum}}'
      scope: constant.numeric.decimal.es
      captures:
        '1': punctuation.decimal.es
        '2': punctuation.decimal.es
        '3': punctuation.decimal.es
        '4': meta.numeric.exponent.e.es
        '5': meta.numeric.exponent.sign.es
        '6': meta.numeric.exponent.digit.es
        '7': meta.numeric.suffix.es
      set: ae_AFTER_VALUE
    - match: '{{binNum}}'
      scope: constant.numeric.binary.es
      captures:
        '1': meta.numeric.prefix.es
        '2': meta.numeric.suffix.es
      set: ae_AFTER_VALUE
    - match: '{{octNum}}'
      scope: constant.numeric.octal.es
      captures:
        '1': meta.numeric.prefix.es
        '2': meta.numeric.suffix.es
      set: ae_AFTER_VALUE
    - match: '{{hexNum}}'
      scope: constant.numeric.hexadecimal.es
      captures:
        '1': meta.numeric.prefix.es
        '2': meta.numeric.suffix.es
      set: ae_AFTER_VALUE
  ae_OBJECT_ARRAY_BINDING:
    - match: >-
        (?x) ((\{)) (?= (?<brackets> [^\{\}] | \{ \g<brackets>* \} )*
        \}\s*=[^=])
      captures:
        '1': punctuation.definition.binding.object.begin.es
        '2': meta.brace.curly.js
      set:
        - ae_AFTER_THING
        - bindingObject
    - match: >-
        (?x) ((\[)) (?= (?<brackets> [^\[\]] | \[ \g<brackets>* \] )*
        \]\s*=[^=])
      captures:
        '1': punctuation.definition.binding.array.begin.es
        '2': meta.brace.square.js
      set:
        - ae_AFTER_THING
        - bindingArray
  ae_OBJECT_ARRAY_LITERAL:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.object.begin.es
        '2': meta.brace.curly.js
      set:
        - ae_OBJECT_ARRAY_LITERAL_END
        - literalObject_OPEN
    - match: '((\[))'
      captures:
        '1': punctuation.definition.array.begin.es
        '2': meta.brace.square.js
      set:
        - ae_OBJECT_ARRAY_LITERAL_END
        - literalArray_OPEN
  ae_OBJECT_ARRAY_LITERAL_END:
    - match: '=(?!=)(?=\s*\$\{)'
      scope: keyword.operator.assignment.es
      set: assignmentExpression_INTERP
    - match: =(?!=)
      scope: keyword.operator.assignment.es
      set: assignmentExpression
    - include: ae_AFTER_VALUE
  ae_PARENTHESIZED:
    - match: ((\())
      captures:
        '1': punctuation.definition.expression.begin.es
        '2': meta.brace.round.js
      set: ae_PARENTHESIZED_AFTER_OPEN
  ae_PARENTHESIZED_AFTER_OPEN:
    - match: ((\)))
      captures:
        '1': punctuation.definition.expression.end.es
        '2': meta.brace.round.js
      set: ae_AFTER_IDENTIFIER
    - match: '{{PLA_anything}}'
      push: expression
  ae_POSTFIX_OPS:
    - match: \+\+
      scope: keyword.operator.arithmetic.increment.postfix.es
      set: ae_AFTER_POSTFIX
    - match: '--'
      scope: keyword.operator.arithmetic.decrement.postfix.es
      set: ae_AFTER_POSTFIX
  ae_PREFIX_OPS:
    - match: 'delete{{idEnd}}'
      scope: keyword.operator.unary.delete.es
    - match: 'void{{idEnd}}'
      scope: keyword.operator.unary.void.es
    - match: 'typeof{{idEnd}}'
      scope: keyword.operator.unary.typeof.es
    - match: \+\+
      scope: keyword.operator.arithmetic.increment.prefix.es
    - match: \+
      scope: keyword.operator.arithmetic.sign.positive.es
    - match: '--'
      scope: keyword.operator.arithmetic.decrement.prefix.es
    - match: '-'
      scope: keyword.operator.arithmetic.sign.negative.es
    - match: '~'
      scope: keyword.operator.bitwise.logical.not.es
    - match: (!!)
      scope: keyword.operator.logical.not.es
      captures:
        '1': meta.idiomatic-cast.boolean.es
    - match: '!'
      scope: keyword.operator.logical.not.es
    - match: '::'
      scope: keyword.operator.bind.es
    - match: 'await{{idEnd}}'
      scope: keyword.control.flow.await
  ae_STRING_REGEX:
    - match: ''''
      scope: punctuation.definition.string.quoted.single.begin.es
      set:
        - ae_AFTER_VALUE
        - stringSingle_AFTER_OPEN
    - match: '"'
      scope: punctuation.definition.string.quoted.double.begin.es
      set:
        - ae_AFTER_VALUE
        - stringDouble_AFTER_OPEN
    - match: \\`
      scope: punctuation.definition.string.interpolated.begin.es
      set:
        - ae_AFTER_VALUE
        - templateString_AFTER_OPEN
    - match: \/
      scope: punctuation.definition.string.regexp.begin.es
      set:
        - ae_AFTER_VALUE
        - regex_AFTER_OPEN
    - match: '(({{identifier}}))\s*(\\`)'
      captures:
        '1': entity.quasi.tag.name.js
        '2': variable.other.readwrite.tag.es
        '3': punctuation.definition.string.interpolated.begin.es
      set:
        - ae_AFTER_VALUE
        - templateString_AFTER_OPEN
  ae_TERNARY_AFTER_QUESTION:
    - match: ':(?=\s*\$\{)'
      scope: invalid.illegal.token.es
      set: assignmentExpression_INTERP
    - match: ':'
      scope: invalid.illegal.token.es
      set: assignmentExpression
    - match: '{{PLA_anything}}'
      set:
        - ae_TERNARY_AFTER_IF_CASE
        - assignmentExpression
  ae_TERNARY_AFTER_IF_CASE:
    - match: ':(?=\s*\$\{)'
      scope: keyword.operator.ternary.else.es
      set: assignmentExpression_INTERP
    - match: ':'
      scope: keyword.operator.ternary.else.es
      set: assignmentExpression
    - include: other_illegal_pop
  ae_YIELD_NEW:
    - match: |-
        (?x)
          (new) \s+ (((
            ( Buffer ) |
            ( {{intrinsicConstructors}} ) |
            {{identifier}}
          ))){{idEnd}}(?!\s*\.)
      captures:
        '1': keyword.operator.new.es
        '2': variable.other.readwrite.es
        '3': meta.instance.constructor entity.name.type.new
        '4': meta.instantiation.es
        '5': support.class.node.es
        '6': support.class.builtin.es
      set: ae_AFTER_THING
    - match: |-
        (?x)
          (new) \s+
          (?: ({{identifier}}) (\.) )
          (?: ({{identifier}}) (\.)
            (?: ({{identifier}}) (\.)
              (?:
                ({{identifier}}) (\.)
              )?
            )?
          )?
          ((({{identifier}})))(?!\s*\.)
      captures:
        '1': keyword.operator.new.es
        '2': variable.other.readwrite.es
        '3': keyword.operator.accessor.es
        '4': variable.other.readwrite.es
        '5': keyword.operator.accessor.es
        '6': variable.other.readwrite.es
        '7': keyword.operator.accessor.es
        '8': variable.other.readwrite.es
        '9': keyword.operator.accessor.es
        '10': variable.other.readwrite.es
        '11': meta.instance.constructor entity.name.type.new
        '12': meta.instantiation.es
      set: ae_AFTER_THING
    - match: (new)\s*(\.)
      captures:
        '1': variable.language.new-target.fake-object.es
        '2': variable.language.new-target.fake-accessor.es
      set: ae_YIELD_NEW_AFTER_NEW_WAT
    - match: 'new{{idEnd}}'
      scope: keyword.operator.new.es
      set: ae_YIELD_NEW_AFTER_NEW_OPERATOR
    - match: 'yield{{idEnd}}'
      scope: keyword.control.flow.yield.es
      set: ae_YIELD_NEW_AFTER_YIELD
  ae_YIELD_NEW_AFTER_YIELD:
    - match: '\*(?=\s*\$\{)'
      scope: keyword.control.flow.yield.iterate.es
      set: assignmentExpression_INTERP
    - match: \*
      scope: keyword.control.flow.yield.iterate.es
      set: assignmentExpression
    - match: '$|(?=\})'
      pop: true
    - include: assignmentExpression_CORE
    - include: else_pop
  ae_YIELD_NEW_AFTER_NEW_OPERATOR:
    - match: \.
      scope: variable.language.new-target.fake-accessor.es
      set: ae_YIELD_NEW_AFTER_NEW_WAT
    - include: assignmentExpression
  ae_YIELD_NEW_AFTER_NEW_WAT:
    - match: 'target{{idEnd}}'
      scope: variable.language.new-target.fake-property.es
      set: ae_AFTER_THING
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_AFTER_ACCESSOR_OPERATOR
  assignmentExpression_NO_IN:
    - include: assignmentExpression_NO_IN_CORE
    - include: other_illegal_pop
  assignmentExpression_NO_IN_CORE:
    - include: syntax_NO_IN_OPEN
    - include: ae_NO_IN_LITERAL_VALUES
    - include: ae_NO_IN_NUMBERS
    - include: ae_NO_IN_STRING_REGEX
    - include: ae_NO_IN_ARRAY_COMPREHENSION
    - include: ae_NO_IN_OBJECT_ARRAY_BINDING
    - include: ae_NO_IN_OBJECT_ARRAY_LITERAL
    - include: ae_NO_IN_YIELD_NEW
    - include: ae_NO_IN_FUNCTION_GENERATOR_CLASS
    - include: ae_PREFIX_OPS
    - include: ae_NO_IN_ARROW
    - include: ae_NO_IN_IDENTIFIERS
    - include: ae_NO_IN_GENERATOR_COMPREHENSION
    - include: ae_NO_IN_PARENTHESIZED
    - include: ae_NO_IN_DO
  ae_NO_IN_AFTER_IDENTIFIER:
    - match: =>
      scope: storage.type.function.arrow.es
      set: ae_NO_IN_ARROW_AFTER_ARROW
    - include: ae_NO_IN_AFTER_THING
  ae_NO_IN_AFTER_THING:
    - match: ((\())
      captures:
        '1': punctuation.definition.arguments.begin.es
        '2': meta.brace.round.js
      push: arguments
    - match: \\`
      scope: punctuation.definition.string.interpolated.begin.es
      set:
        - ae_NO_IN_AFTER_VALUE
        - templateString_AFTER_OPEN
    - include: syntax_NO_IN_OPEN
    - include: ae_NO_IN_POSTFIX_OPS
    - include: ae_NO_IN_INFIX_OPS_ASSIGNMENT
    - include: ae_NO_IN_AFTER_VALUE
  ae_NO_IN_AFTER_VALUE:
    - match: \.
      scope: keyword.operator.accessor.es
      set: ae_NO_IN_AFTER_ACCESSOR_OPERATOR
    - match: '((\[))'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - ae_NO_IN_AFTER_THING
        - computedProp_AFTER_AE
        - assignmentExpression_NO_IN
    - include: ae_NO_IN_INFIX_OPS
    - include: ae_NO_IN_AFTER_POSTFIX
  ae_NO_IN_AFTER_POSTFIX:
    - include: ae_NO_IN_INFIX_OPS
    - include: else_pop
  ae_NO_IN_AFTER_ACCESSOR_OPERATOR:
    - match: '((({{identifierAllCaps}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.property.allCap.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: '((({{identifierInitCap}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.property.initCap.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: '((({{identifierName}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.property.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: '(((#{{identifierName}})))\s*((\())'
      captures:
        '1': variable.language.private.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: '(prototype){{idEnd}}'
      scope: variable.other.readwrite.property.prototype.es
      captures:
        '1': variable.language.prototype.es
      set: ae_NO_IN_AFTER_THING
    - match: '(__proto__){{idEnd}}'
      scope: variable.other.readwrite.property.proto.es
      captures:
        '1': variable.language.proto.es
      set: ae_NO_IN_AFTER_THING
    - match: '{{identifierName}}(?=\$\{)'
      scope: variable.other.readwrite.property.es
      set: ae_NO_IN_AFTER_THING_INTERP
    - match: '{{identifierName}}'
      scope: variable.other.readwrite.property.es
      set: ae_NO_IN_AFTER_THING
    - match: '#{{identifierName}}(?=\$\{)'
      scope: variable.language.private.es
      set: ae_NO_IN_AFTER_THING_INTERP
    - match: '#{{identifierName}}'
      scope: variable.language.private.es
      set: ae_NO_IN_AFTER_THING
    - include: other_illegal_pop
  ae_NO_IN_ARRAY_COMPREHENSION:
    - match: '((\[))\s*(for){{idEnd}}'
      captures:
        '1': punctuation.definition.comprehension.array.begin.es
        '2': meta.brace.square.js
        '3': keyword.control.loop.for.comprehension.array.es
      set: ae_NO_IN_ARRAY_COMPREHENSION_AFTER_FOR
  ae_NO_IN_ARRAY_COMPREHENSION_AFTER_FOR:
    - match: ((\())
      captures:
        '1': punctuation.definition.expression.loop.comprehension.array.begin.es
        '2': meta.brace.round.js
      set:
        - ae_NO_IN_ARRAY_COMPREHENSION_AFTER_LHSE
        - assignmentExpression_NO_IN
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_ARRAY_COMPREHENSION_BEFORE_CLOSE
  ae_NO_IN_ARRAY_COMPREHENSION_AFTER_LHSE:
    - match: 'of{{idEnd}}'
      scope: keyword.control.loop.of.comprehension.array.es
      set:
        - ae_NO_IN_ARRAY_COMPREHENSION_AFTER_EXP_BODY
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_ARRAY_COMPREHENSION_AFTER_EXP_BODY
  ae_NO_IN_ARRAY_COMPREHENSION_AFTER_EXP_BODY:
    - match: ((\)))
      captures:
        '1': punctuation.definition.expression.loop.comprehension.array.begin.es
        '2': meta.brace.round.js
      set: ae_NO_IN_ARRAY_COMPREHENSION_AFTER_EXP
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_ARRAY_COMPREHENSION_BEFORE_CLOSE
  ae_NO_IN_ARRAY_COMPREHENSION_AFTER_EXP:
    - match: 'if{{idEnd}}'
      scope: keyword.control.loop.conditional.if.comprehension.array.es
      set: ae_NO_IN_ARRAY_COMPREHENSION_AFTER_IF
    - match: 'for{{idEnd}}'
      scope: keyword.control.loop.for.comprehension.array.es
      set: ae_NO_IN_ARRAY_COMPREHENSION_AFTER_FOR
    - match: '{{PLA_anything}}'
      set:
        - ae_NO_IN_ARRAY_COMPREHENSION_BEFORE_CLOSE
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_ARRAY_COMPREHENSION_BEFORE_CLOSE
  ae_NO_IN_ARRAY_COMPREHENSION_AFTER_IF:
    - match: ((\())
      captures:
        '1': >-
          punctuation.definition.expression.conditional.comprehension.array.begin.es
        '2': meta.brace.round.js
      set:
        - ae_NO_IN_ARRAY_COMPREHENSION_AFTER_IF_EXP
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_ARRAY_COMPREHENSION_AFTER_IF_EXP
  ae_NO_IN_ARRAY_COMPREHENSION_AFTER_IF_EXP:
    - match: ((\)))
      captures:
        '1': >-
          punctuation.definition.expression.conditional.comprehension.array.begin.es
        '2': meta.brace.round.js
      set: ae_NO_IN_ARRAY_COMPREHENSION_AFTER_EXP
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_ARRAY_COMPREHENSION_BEFORE_CLOSE
  ae_NO_IN_ARRAY_COMPREHENSION_BEFORE_CLOSE:
    - match: '((\]))'
      captures:
        '1': punctuation.definition.comprehension.array.end.es
        '2': meta.brace.square.js
      set: ae_NO_IN_AFTER_VALUE
    - include: other_illegal
  ae_NO_IN_ARROW:
    - match: '(?x) \( (?= (?<parens> [^\(\)] | \( \g<parens>* \) )* \)\s*=> )'
      scope: punctuation.definition.parameters.function.arrow.begin.es
      set:
        - ae_NO_IN_ARROW_AFTER_PARAMS
        - parameters
    - match: ((async))\s*(\()
      captures:
        '1': storage.type.js
        '2': storage.modifier.async.expression.es
        '3': punctuation.definition.parameters.function.arrow.begin.es
      set:
        - ae_NO_IN_ARROW_AFTER_PARAMS
        - parameters
  ae_NO_IN_ARROW_AFTER_PARAMS:
    - match: \)
      scope: punctuation.definition.parameters.function.arrow.end.es
      set: ae_NO_IN_ARROW_BEFORE_ARROW
    - include: other_illegal_pop
  ae_NO_IN_ARROW_BEFORE_ARROW:
    - match: =>
      scope: storage.type.function.arrow.es
      set: ae_NO_IN_ARROW_AFTER_ARROW
    - include: other_illegal_pop
  ae_NO_IN_ARROW_AFTER_ARROW:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.function.arrow.body.begin.es
        '2': meta.brace.curly.js
      set: ae_NO_IN_ARROW_AFTER_BRACE
    - match: '{{PLA_anything}}'
      set: assignmentExpression_NO_IN
  ae_NO_IN_ARROW_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.function.arrow.body.end.es
        '2': meta.brace.curly.js
      set: ae_NO_IN_AFTER_THING
    - include: useStrict
    - include: statements
    - include: other_illegal
  ae_NO_IN_CLASS_AFTER_CLASS:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.class.body.begin.es
        '2': meta.brace.curly.js
      set:
        - ae_NO_IN_AFTER_THING
        - classDeclaration_AFTER_BRACE
    - match: '((extends)){{idEnd}}'
      captures:
        '1': storage.type.extends.js
        '2': storage.modifier.extends.es
      set:
        - ae_NO_IN_AFTER_THING
        - classDeclaration_AFTER_HERITAGE
        - assignmentExpression_NO_IN
    - match: '(({{identifier}}))'
      captures:
        '1': entity.name.class.js
        '2': entity.name.class.es
      set:
        - ae_NO_IN_AFTER_THING
        - classDeclaration_AFTER_NAME
    - include: other_illegal_pop
  ae_NO_IN_DO:
    - match: 'do{{idEnd}}'
      scope: keyword.control.do-expression.do.es
      set:
        - ae_NO_IN_AFTER_THING
        - ae_DO_AFTER_DO
  ae_NO_IN_FUNCTION_GENERATOR_CLASS:
    - match: function\s*\.\s*sent
      scope: variable.language.function-sent.es
      set: ae_NO_IN_AFTER_THING
    - match: ((function))\s*((\*))
      captures:
        '1': storage.type.function.js
        '2': storage.type.function.generator.expression.es
        '3': keyword.generator.asterisk.js
        '4': storage.modifier.generator.asterisk.expression.es
      set: ae_NO_IN_GENERATOR_AFTER_ASTERISK
    - match: '((async))?\s*((function)){{idEnd}}'
      captures:
        '1': storage.type.js
        '2': storage.modifier.async.expression.es
        '3': storage.type.function.js
        '4': storage.type.function.expression.es
      set: ae_NO_IN_FUNCTION_AFTER_FUNCTION
    - match: 'class{{idEnd}}'
      scope: storage.type.class.expression.es
      set: ae_NO_IN_CLASS_AFTER_CLASS
  ae_NO_IN_FUNCTION_AFTER_FUNCTION:
    - match: \(
      scope: punctuation.definition.parameters.function.begin.es
      set:
        - ae_NO_IN_AFTER_THING
        - functionDeclaration_AFTER_PARAMS
        - parameters
    - match: '{{identifier}}'
      scope: entity.name.function.es
      set:
        - ae_NO_IN_AFTER_THING
        - functionDeclaration_AFTER_NAME
    - include: other_illegal_pop
  ae_NO_IN_GENERATOR_AFTER_ASTERISK:
    - match: \(
      scope: punctuation.definition.parameters.generator.begin.es
      set:
        - ae_NO_IN_AFTER_THING
        - generatorDeclaration_AFTER_PARAMS
        - parameters
    - match: '{{identifier}}'
      scope: entity.name.function.generator.es
      set:
        - ae_NO_IN_AFTER_THING
        - generatorDeclaration_AFTER_NAME
    - include: other_illegal_pop
  ae_NO_IN_GENERATOR_COMPREHENSION:
    - match: '((\())\s*(for){{idEnd}}'
      captures:
        '1': punctuation.definition.comprehension.generator.begin.es
        '2': meta.brace.round.js
        '3': keyword.control.loop.for.comprehension.generator.es
      set: ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_FOR
  ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_FOR:
    - match: ((\())
      captures:
        '1': >-
          punctuation.definition.expression.loop.comprehension.generator.begin.es
        '2': meta.brace.round.js
      set:
        - ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_LHSE
        - assignmentExpression_NO_IN
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_GENERATOR_COMPREHENSION_BEFORE_CLOSE
  ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_LHSE:
    - match: 'of{{idEnd}}'
      scope: keyword.control.loop.of.comprehension.generator.es
      set:
        - ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_EXP_BODY
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_EXP_BODY
  ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_EXP_BODY:
    - match: ((\)))
      captures:
        '1': >-
          punctuation.definition.expression.loop.comprehension.generator.begin.es
        '2': meta.brace.round.js
      set: ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_EXP
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_GENERATOR_COMPREHENSION_BEFORE_CLOSE
  ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_EXP:
    - match: 'if{{idEnd}}'
      scope: keyword.control.loop.conditional.if.comprehension.generator.es
      set: ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_IF
    - match: 'for{{idEnd}}'
      scope: keyword.control.loop.for.comprehension.generator.es
      set: ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_FOR
    - match: '{{PLA_anything}}'
      set:
        - ae_NO_IN_GENERATOR_COMPREHENSION_BEFORE_CLOSE
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_GENERATOR_COMPREHENSION_BEFORE_CLOSE
  ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_IF:
    - match: ((\())
      captures:
        '1': >-
          punctuation.definition.expression.conditional.comprehension.generator.begin.es
        '2': meta.brace.round.js
      set:
        - ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_IF_EXP
        - expression
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_IF_EXP
  ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_IF_EXP:
    - match: ((\)))
      captures:
        '1': >-
          punctuation.definition.expression.conditional.comprehension.generator.begin.es
        '2': meta.brace.round.js
      set: ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_EXP
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_GENERATOR_COMPREHENSION_BEFORE_CLOSE
  ae_NO_IN_GENERATOR_COMPREHENSION_BEFORE_CLOSE:
    - match: ((\)))
      captures:
        '1': punctuation.definition.comprehension.generator.end.es
        '2': meta.brace.round.js
      set: ae_NO_IN_AFTER_THING
    - match: \(
      scope: invalid.illegal.token.es
      set: ae_NO_IN_GENERATOR_COMPREHENSION_AFTER_EXP_BODY
    - include: other_illegal
  ae_NO_IN_IDENTIFIERS:
    - include: ae_NO_IN_IDENTIFIERS_LANGUAGE
    - match: '({{identifier}})\s*(=>)'
      captures:
        '1': variable.parameter.es
        '2': storage.type.function.arrow.es
      set: ae_NO_IN_ARROW_AFTER_ARROW
    - include: ae_NO_IN_IDENTIFIERS_INTRINSIC
    - include: ae_NO_IN_IDENTIFIERS_ENVIRONMENTAL
    - match: '((({{identifierAllCapsStrict}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.allCap.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: '{{identifierAllCapsStrict}}'
      scope: variable.other.readwrite.allCap.es
      set: ae_NO_IN_AFTER_IDENTIFIER
    - match: '((({{identifierInitCapStrict}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.initCap.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: '{{identifierInitCapStrict}}'
      scope: variable.other.readwrite.initCap.es
      set: ae_NO_IN_AFTER_IDENTIFIER
    - match: '((({{identifier}})))\s*((\())'
      captures:
        '1': variable.other.readwrite.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: '{{identifier}}'
      scope: variable.other.readwrite.es
      set: ae_NO_IN_AFTER_IDENTIFIER
  ae_NO_IN_IDENTIFIERS_LANGUAGE:
    - match: (((this)))\s*((\())
      captures:
        '1': variable.language.this.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: 'this{{idEnd}}'
      scope: variable.language.this.es
      set: ae_NO_IN_AFTER_THING
    - match: (((super)))\s*((\())
      captures:
        '1': variable.language.super.es
        '2': meta.function-call
        '3': meta.invocation.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: 'super{{idEnd}}'
      scope: variable.language.super.es
      set: ae_NO_IN_AFTER_THING
    - match: import\s*\.\s*meta\b
      scope: variable.language.import-meta
      set: ae_NO_IN_AFTER_VALUE
    - match: import\s*\(
      scope: variable.language.import-dynamic
      set:
        - - match: \)
            scope: variable.language.import-dynamic
            set: ae_NO_IN_AFTER_THING
          - include: other_illegal
        - - include: assignmentExpression_NO_IN
    - match: 'arguments{{idEnd}}'
      scope: variable.language.arguments.es
      set: ae_NO_IN_AFTER_THING
  ae_NO_IN_IDENTIFIERS_ENVIRONMENTAL:
    - match: ((((Buffer)))\s*)((\())
      captures:
        '1': variable.other.readwrite.es
        '2': meta.instance.constructor entity.name.type.new
        '3': meta.instantiation.es
        '4': support.class.node.es
        '5': punctuation.definition.arguments.begin.es
        '6': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: '(Buffer){{idEnd}}'
      scope: variable.other.readwrite.es
      captures:
        '1': support.class.node.es
      set: ae_NO_IN_AFTER_THING
    - match: (((require)))\s*((\())
      captures:
        '1': meta.function-call
        '2': meta.invocation.es
        '3': support.function.node.require.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: >-
        (global|GLOBAL|process|__(?:dir|file)name|module|exports|require){{idEnd}}
      scope: support.variable.node.es
      set: ae_NO_IN_AFTER_THING
    - match: '(_|R){{idEnd}}'
      scope: support.variable.functional-library.es
      set: ae_NO_IN_AFTER_THING
    - match: '(?:\$|angular|Polymer|React){{idEnd}}'
      scope: support.variable.dom-library.es
      set: ae_NO_IN_AFTER_THING
    - match: '(document|frames|history|location|navigator|screen|window){{idEnd}}'
      scope: support.variable.dom.es
      set: ae_NO_IN_AFTER_THING
  ae_NO_IN_IDENTIFIERS_INTRINSIC:
    - match: '(?x) (((({{intrinsicConstructors}})))\s*)((\())'
      captures:
        '1': variable.other.readwrite.es
        '2': meta.instance.constructor entity.name.type.new
        '3': meta.instantiation.es
        '4': support.class.builtin.es
        '5': punctuation.definition.arguments.begin.es
        '6': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: '(?x) ({{intrinsicConstructors}}){{idEnd}}'
      scope: variable.other.readwrite.es
      captures:
        '1': support.class.builtin.es
      set: ae_NO_IN_AFTER_THING
    - match: '(?:console|Intl|JSON|Math|SIMD){{idEnd}}'
      scope: support.variable.builtin.es
      set: ae_NO_IN_AFTER_THING
    - match: '(?x) ((( {{intrinsicFunctions}} )))\s*((\())'
      captures:
        '1': meta.function-call
        '2': meta.invocation.es
        '3': support.function.builtin.es
        '4': punctuation.definition.arguments.begin.es
        '5': meta.brace.round.js
      set:
        - ae_NO_IN_AFTER_THING
        - arguments
    - match: '(?x) ({{intrinsicFunctions}}){{idEnd}}'
      scope: support.function.builtin.es
      set: ae_NO_IN_AFTER_THING
  ae_NO_IN_INFIX_OPS:
    - match: \?
      scope: keyword.operator.ternary.if.es
      set: ae_NO_IN_TERNARY_AFTER_QUESTION
    - match: \+(?!=)
      scope: keyword.operator.arithmetic.addition.es
      set: assignmentExpression_NO_IN
    - match: '-(?!=)'
      scope: keyword.operator.arithmetic.subtraction.es
      set: assignmentExpression_NO_IN
    - match: \*\*(?!=)
      scope: keyword.operator.arithmetic.exponentiation.es
      set: assignmentExpression_NO_IN
    - match: |-
        (?x)
          \*
          (?! [=\*])
          (?! \s* " [^"]+ " \s* \( )
          (?! \s* '' [^'']+ '' \s* \( )
          (?! \s* \[ [\]]+ \] \s* \( )
          (?! \s* {{identifier}} \s* \([^)]*\) \s* \{)
      scope: keyword.operator.arithmetic.multiplication.es
      set: assignmentExpression_NO_IN
    - match: \/(?!=)
      scope: keyword.operator.arithmetic.division.es
      set: assignmentExpression_NO_IN
    - match: '%(?!=)'
      scope: keyword.operator.arithmetic.modulo.es
      set: assignmentExpression_NO_IN
    - match: ===
      scope: keyword.operator.comparison.equality.strict.es
      set: assignmentExpression_NO_IN
    - match: ==
      scope: keyword.operator.comparison.equality.coercive.es
      set: assignmentExpression_NO_IN
    - match: '!=='
      scope: keyword.operator.comparison.non-equality.strict.es
      set: assignmentExpression_NO_IN
    - match: '!='
      scope: keyword.operator.comparison.non-equality.coercive.es
      set: assignmentExpression_NO_IN
    - match: '&&'
      scope: keyword.operator.logical.and.es
      set: assignmentExpression_NO_IN
    - match: \|\|(?!=)
      scope: keyword.operator.logical.or.es
      set: assignmentExpression_NO_IN
    - match: '&(?!=)'
      scope: keyword.operator.bitwise.logical.and.es
      set: assignmentExpression_NO_IN
    - match: '\|(?![=\|])'
      scope: keyword.operator.bitwise.logical.or.es
      set: assignmentExpression_NO_IN
    - match: \^(?!=)
      scope: keyword.operator.bitwise.logical.xor.es
      set: assignmentExpression_NO_IN
    - match: <<(?!=)
      scope: keyword.operator.bitwise.shift.left.es
      set: assignmentExpression_NO_IN
    - match: '>>>(?!=)'
      scope: keyword.operator.bitwise.shift.right.unsigned.es
      set: assignmentExpression_NO_IN
    - match: '>>(?![=>])'
      scope: keyword.operator.bitwise.shift.right.es
      set: assignmentExpression_NO_IN
    - match: <=
      scope: keyword.operator.relational.lte.es
      set: assignmentExpression_NO_IN
    - match: <
      scope: keyword.operator.relational.lt.es
      set: assignmentExpression_NO_IN
    - match: '>='
      scope: keyword.operator.relational.gte.es
      set: assignmentExpression_NO_IN
    - match: '>'
      scope: keyword.operator.relational.gt.es
      set: assignmentExpression_NO_IN
    - match: 'instanceof{{idEnd}}'
      scope: keyword.operator.relational.instanceof.es
      set: assignmentExpression_NO_IN
    - match: '::'
      scope: keyword.operator.bind.es
      set: assignmentExpression_NO_IN
  ae_NO_IN_INFIX_OPS_ASSIGNMENT:
    - match: =(?!=)
      scope: keyword.operator.assignment.es
      set: assignmentExpression_NO_IN
    - match: \+=
      scope: keyword.operator.assignment.augmented.arithmetic.addition.es
      set: assignmentExpression_NO_IN
    - match: '-='
      scope: keyword.operator.assignment.augmented.arithmetic.subtraction.es
      set: assignmentExpression_NO_IN
    - match: \*\*=
      scope: keyword.operator.assignment.augmented.arithmetic.exponentiation.es
      set: assignmentExpression_NO_IN
    - match: \*=
      scope: keyword.operator.assignment.augmented.arithmetic.multiplication.es
      set: assignmentExpression_NO_IN
    - match: \/=
      scope: keyword.operator.assignment.augmented.arithmetic.division.es
      set: assignmentExpression_NO_IN
    - match: '%='
      scope: keyword.operator.assignment.augmented.arithmetic.modulo.es
      set: assignmentExpression_NO_IN
    - match: \|\|=
      scope: keyword.operator.assignment.conditional.mallet.es
      set: assignmentExpression_NO_IN
    - match: '&='
      scope: keyword.operator.assignment.augmented.bitwise.logical.and.es
      set: assignmentExpression_NO_IN
    - match: \^=
      scope: keyword.operator.assignment.augmented.bitwise.logical.xor.es
      set: assignmentExpression_NO_IN
    - match: \|=
      scope: keyword.operator.assignment.augmented.bitwise.logical.or.es
      set: assignmentExpression_NO_IN
    - match: <<=
      scope: keyword.operator.assignment.augmented.bitwise.shift.left.es
      set: assignmentExpression_NO_IN
    - match: '>>>='
      scope: keyword.operator.assignment.augmented.bitwise.shift.right.unsigned.es
      set: assignmentExpression_NO_IN
    - match: '>>='
      scope: keyword.operator.assignment.augmented.bitwise.shift.right.es
      set: assignmentExpression_NO_IN
  ae_NO_IN_LITERAL_VALUES:
    - match: 'NaN(?![{{ID_Continue}}])'
      scope: constant.language.nan.es
      set: ae_NO_IN_AFTER_VALUE
    - match: 'null(?![{{ID_Continue}}])'
      scope: constant.language.null.es
      set: ae_NO_IN_AFTER_VALUE
    - match: 'true(?![{{ID_Continue}}])'
      scope: constant.language.boolean.true.es
      set: ae_NO_IN_AFTER_VALUE
    - match: 'false(?![{{ID_Continue}}])'
      scope: constant.language.boolean.false.es
      set: ae_NO_IN_AFTER_VALUE
    - match: 'Infinity(?![{{ID_Continue}}])'
      scope: constant.language.infinity.es
      set: ae_NO_IN_AFTER_VALUE
    - match: 'undefined(?![{{ID_Continue}}])'
      scope: constant.language.undefined.es
      set: ae_NO_IN_AFTER_VALUE
  ae_NO_IN_NUMBERS:
    - match: '{{decNum}}'
      scope: constant.numeric.decimal.es
      captures:
        '1': punctuation.decimal.es
        '2': punctuation.decimal.es
        '3': punctuation.decimal.es
        '4': meta.numeric.exponent.e.es
        '5': meta.numeric.exponent.sign.es
        '6': meta.numeric.exponent.digit.es
        '7': meta.numeric.suffix.es
      set: ae_NO_IN_AFTER_VALUE
    - match: '{{binNum}}'
      scope: constant.numeric.binary.es
      captures:
        '1': meta.numeric.prefix.es
        '2': meta.numeric.suffix.es
      set: ae_NO_IN_AFTER_VALUE
    - match: '{{octNum}}'
      scope: constant.numeric.octal.es
      captures:
        '1': meta.numeric.prefix.es
        '2': meta.numeric.suffix.es
      set: ae_NO_IN_AFTER_VALUE
    - match: '{{hexNum}}'
      scope: constant.numeric.hexadecimal.es
      captures:
        '1': meta.numeric.prefix.es
        '2': meta.numeric.suffix.es
      set: ae_NO_IN_AFTER_VALUE
  ae_NO_IN_OBJECT_ARRAY_BINDING:
    - match: >-
        (?x) ((\{)) (?= (?<brackets> [^\{\}] | \{ \g<brackets>* \} )*
        \}\s*=[^=])
      captures:
        '1': punctuation.definition.binding.object.begin.es
        '2': meta.brace.curly.js
      set:
        - ae_NO_IN_AFTER_THING
        - bindingObject
    - match: >-
        (?x) ((\[)) (?= (?<brackets> [^\[\]] | \[ \g<brackets>* \] )*
        \]\s*=[^=])
      captures:
        '1': punctuation.definition.binding.array.begin.es
        '2': meta.brace.square.js
      set:
        - ae_NO_IN_AFTER_THING
        - bindingArray
  ae_NO_IN_OBJECT_ARRAY_LITERAL:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.object.begin.es
        '2': meta.brace.curly.js
      set:
        - ae_NO_IN_OBJECT_ARRAY_LITERAL_END
        - literalObject_OPEN
    - match: '((\[))'
      captures:
        '1': punctuation.definition.array.begin.es
        '2': meta.brace.square.js
      set:
        - ae_NO_IN_OBJECT_ARRAY_LITERAL_END
        - literalArray_OPEN
  ae_NO_IN_OBJECT_ARRAY_LITERAL_END:
    - match: =(?!=)
      scope: keyword.operator.assignment.es
      set: assignmentExpression_NO_IN
    - include: ae_NO_IN_AFTER_VALUE
  ae_NO_IN_PARENTHESIZED:
    - match: ((\())
      captures:
        '1': punctuation.definition.expression.begin.es
        '2': meta.brace.round.js
      set: ae_NO_IN_PARENTHESIZED_AFTER_OPEN
  ae_NO_IN_PARENTHESIZED_AFTER_OPEN:
    - match: ((\)))
      captures:
        '1': punctuation.definition.expression.end.es
        '2': meta.brace.round.js
      set: ae_NO_IN_AFTER_IDENTIFIER
    - match: '{{PLA_anything}}'
      push: expression
  ae_NO_IN_POSTFIX_OPS:
    - match: \+\+
      scope: keyword.operator.arithmetic.increment.postfix.es
      set: ae_NO_IN_AFTER_POSTFIX
    - match: '--'
      scope: keyword.operator.arithmetic.decrement.postfix.es
      set: ae_NO_IN_AFTER_POSTFIX
  ae_NO_IN_STRING_REGEX:
    - match: ''''
      scope: punctuation.definition.string.quoted.single.begin.es
      set:
        - ae_NO_IN_AFTER_VALUE
        - stringSingle_AFTER_OPEN
    - match: '"'
      scope: punctuation.definition.string.quoted.double.begin.es
      set:
        - ae_NO_IN_AFTER_VALUE
        - stringDouble_AFTER_OPEN
    - match: \\`
      scope: punctuation.definition.string.interpolated.begin.es
      set:
        - ae_NO_IN_AFTER_VALUE
        - templateString_AFTER_OPEN
    - match: \/
      scope: punctuation.definition.string.regexp.begin.es
      set:
        - ae_NO_IN_AFTER_VALUE
        - regex_AFTER_OPEN
    - match: '(({{identifier}}))\s*(\\`)'
      captures:
        '1': entity.quasi.tag.name.js
        '2': variable.other.readwrite.tag.es
        '3': punctuation.definition.string.interpolated.begin.es
      set:
        - ae_NO_IN_AFTER_VALUE
        - templateString_AFTER_OPEN
  ae_NO_IN_TERNARY_AFTER_QUESTION:
    - match: ':'
      scope: invalid.illegal.token.es
      set: assignmentExpression_NO_IN
    - match: '{{PLA_anything}}'
      set:
        - ae_NO_IN_TERNARY_AFTER_IF_CASE
        - assignmentExpression_NO_IN
  ae_NO_IN_TERNARY_AFTER_IF_CASE:
    - match: ':'
      scope: keyword.operator.ternary.else.es
      set: assignmentExpression_NO_IN
    - include: other_illegal_pop
  ae_NO_IN_YIELD_NEW:
    - match: |-
        (?x)
          (new) \s+ (((
            ( Buffer ) |
            ( {{intrinsicConstructors}} ) |
            {{identifier}}
          ))){{idEnd}}(?!\s*\.)
      captures:
        '1': keyword.operator.new.es
        '2': variable.other.readwrite.es
        '3': meta.instance.constructor entity.name.type.new
        '4': meta.instantiation.es
        '5': support.class.node.es
        '6': support.class.builtin.es
      set: ae_NO_IN_AFTER_THING
    - match: |-
        (?x)
          (new) \s+
          (?: ({{identifier}}) (\.) )
          (?: ({{identifier}}) (\.)
            (?: ({{identifier}}) (\.)
              (?:
                ({{identifier}}) (\.)
              )?
            )?
          )?
          ((({{identifier}})))(?!\s*\.)
      captures:
        '1': keyword.operator.new.es
        '2': variable.other.readwrite.es
        '3': keyword.operator.accessor.es
        '4': variable.other.readwrite.es
        '5': keyword.operator.accessor.es
        '6': variable.other.readwrite.es
        '7': keyword.operator.accessor.es
        '8': variable.other.readwrite.es
        '9': keyword.operator.accessor.es
        '10': variable.other.readwrite.es
        '11': meta.instance.constructor entity.name.type.new
        '12': meta.instantiation.es
      set: ae_NO_IN_AFTER_THING
    - match: (new)\s*(\.)
      captures:
        '1': variable.language.new-target.fake-object.es
        '2': variable.language.new-target.fake-accessor.es
      set: ae_NO_IN_YIELD_NEW_AFTER_NEW_WAT
    - match: 'new{{idEnd}}'
      scope: keyword.operator.new.es
      set: ae_NO_IN_YIELD_NEW_AFTER_NEW_OPERATOR
    - match: 'yield{{idEnd}}'
      scope: keyword.control.flow.yield.es
      set: ae_NO_IN_YIELD_NEW_AFTER_YIELD
  ae_NO_IN_YIELD_NEW_AFTER_YIELD:
    - match: \*
      scope: keyword.control.flow.yield.iterate.es
      set: assignmentExpression_NO_IN
    - match: '$|(?=\})'
      pop: true
    - include: assignmentExpression_NO_IN_CORE
    - include: else_pop
  ae_NO_IN_YIELD_NEW_AFTER_NEW_OPERATOR:
    - match: \.
      scope: variable.language.new-target.fake-accessor.es
      set: ae_NO_IN_YIELD_NEW_AFTER_NEW_WAT
    - include: assignmentExpression_NO_IN
  ae_NO_IN_YIELD_NEW_AFTER_NEW_WAT:
    - match: 'target{{idEnd}}'
      scope: variable.language.new-target.fake-property.es
      set: ae_NO_IN_AFTER_THING
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: ae_NO_IN_AFTER_ACCESSOR_OPERATOR
  literalArray_OPEN:
    - match: '((\]))'
      captures:
        '1': punctuation.definition.array.end.es
        '2': meta.brace.square.js
      pop: true
    - match: ','
      scope: punctuation.separator.array-element.es
    - match: '\.{3}(?=\s*\$\{)'
      scope: keyword.operator.spread.es
      set:
        - literalArray_AFTER_MEMBER
        - assignmentExpression_INTERP
    - match: '\.{3}'
      scope: keyword.operator.spread.es
      set:
        - literalArray_AFTER_MEMBER
        - assignmentExpression
    - match: '{{PLA_anything}}'
      set:
        - literalArray_AFTER_MEMBER
        - assignmentExpression
  literalArray_AFTER_MEMBER:
    - match: '(?<=\])(?==)'
      set: bindingArray_AFTER_ELEM
    - match: '{{PLA_anything}}'
      set: literalArray_OPEN
  literalObject_OPEN:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.object.end.es
        '2': meta.brace.curly.js
      pop: true
    - match: ((\*))
      captures:
        '1': keyword.generator.asterisk.js
        '2': storage.modifier.generator.asterisk.method.es
      set:
        - literalObject_AFTER_AE
        - generatorMethod_AFTER_ASTERISK
    - match: '((get))\s*((:))(?=\s*\$\{)'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': variable.other.readwrite.property.object-literal.es
        '3': constant.other.object.key.js
        '4': punctuation.separator.key-value.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression_INTERP
    - match: '((get))\s*((:))'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': variable.other.readwrite.property.object-literal.es
        '3': constant.other.object.key.js
        '4': punctuation.separator.key-value.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression
    - match: '((get)){{idEnd}}(?=\s+{{identifierStart}})'
      captures:
        '1': storage.type.accessor.js
        '2': storage.modifier.accessor.get.es
      set:
        - literalObject_AFTER_AE
        - accessorMethod_AFTER_GET
    - match: '((set))\s*((:))(?=\s*\$\{)'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': variable.other.readwrite.property.object-literal.es
        '3': constant.other.object.key.js
        '4': punctuation.separator.key-value.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression_INTERP
    - match: '((set))\s*((:))'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': variable.other.readwrite.property.object-literal.es
        '3': constant.other.object.key.js
        '4': punctuation.separator.key-value.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression
    - match: '((set)){{idEnd}}(?=\s+{{identifierStart}})'
      captures:
        '1': storage.type.accessor.js
        '2': storage.modifier.accessor.set.es
      set:
        - literalObject_AFTER_AE
        - accessorMethod_AFTER_SET
    - match: '((async)){{idEnd}}(?!\s*:)'
      captures:
        '1': storage.type.js
        '2': storage.modifier.async.es
      set:
        - literalObject_AFTER_AE
        - asyncMethod_AFTER_ASYNC
    - match: '(({{allThreeIDs}}))\s*(\()'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.es
        '3': variable.other.readwrite.property.allCap.es
        '4': variable.other.readwrite.property.initCap.es
        '5': variable.other.readwrite.property.es
        '6': punctuation.definition.parameters.method.begin.es
      set:
        - literalObject_AFTER_AE
        - method_AFTER_PARAMS
        - parameters
    - match: '({{allThreeIDs}})\s*((:))(?=\s*\$\{)'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': variable.other.readwrite.property.object-literal.allCap.es
        '3': variable.other.readwrite.property.object-literal.initCap.es
        '4': variable.other.readwrite.property.object-literal.es
        '5': constant.other.object.key.js
        '6': punctuation.separator.key-value.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression_INTERP
    - match: '({{allThreeIDs}})\s*((:))'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': variable.other.readwrite.property.object-literal.allCap.es
        '3': variable.other.readwrite.property.object-literal.initCap.es
        '4': variable.other.readwrite.property.object-literal.es
        '5': constant.other.object.key.js
        '6': punctuation.separator.key-value.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression
    - match: '(?={{identifier}}\s*=)'
      set: bindingObject
    - match: '{{allThreeIDs}}'
      captures:
        '1': variable.other.readwrite.property.shorthand.allCap.es
        '2': variable.other.readwrite.property.shorthand.initCap.es
        '3': variable.other.readwrite.property.shorthand.es
      set: literalObject_AFTER_SHORTHAND
    - match: '(({{identifierName}}))(?=\$\{)'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': variable.other.readwrite.property.object-literal.es
      set: literalObject_AFTER_SHORTHAND_INTERP
    - match: '(({{identifierName}}))'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': variable.other.readwrite.property.object-literal.es
      set: literalObject_AFTER_SHORTHAND
    - match: ''''
      scope: punctuation.definition.string.quoted.single.begin.es
      set:
        - literalObject_AFTER_PROP
        - stringSingle_AFTER_OPEN
    - match: '"'
      scope: punctuation.definition.string.quoted.double.begin.es
      set:
        - literalObject_AFTER_PROP
        - stringDouble_AFTER_OPEN
    - match: '\.{3}(?=\s*\$\{)'
      scope: keyword.operator.spread.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression_INTERP
    - match: '\.{3}'
      scope: keyword.operator.spread.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression
    - match: ((@))
      captures:
        '1': punctuation.definition.tag.js
        '2': punctuation.definition.decorator.es
      push: decoratorExpression
    - match: '({{decNum}})'
      scope: constant.numeric.decimal.es
      captures:
        '1': variable.other.readwrite.property.object-literal.es
        '2': punctuation.decimal.es
        '3': punctuation.decimal.es
        '4': punctuation.decimal.es
        '5': meta.numeric.exponent.e.es
        '6': meta.numeric.exponent.sign.es
        '7': meta.numeric.exponent.digit.es
        '8': meta.numeric.suffix.es
      set: literalObject_AFTER_PROP
    - match: '({{binNum}})'
      scope: constant.numeric.binary.es
      captures:
        '1': variable.other.readwrite.property.object-literal.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: literalObject_AFTER_PROP
    - match: '({{octNum}})'
      scope: constant.numeric.octal.es
      captures:
        '1': variable.other.readwrite.property.object-literal.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: literalObject_AFTER_PROP
    - match: '({{hexNum}})'
      scope: constant.numeric.hexadecimal.es
      captures:
        '1': variable.other.readwrite.property.object-literal.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: literalObject_AFTER_PROP
    - match: '((\[))'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - literalObject_AFTER_PROP
        - computedProp_AFTER_AE
        - assignmentExpression
  literalObject_AFTER_SHORTHAND:
    - match: '((:))(?=\s*\$\{)'
      captures:
        '1': constant.other.object.key.js
        '2': punctuation.separator.key-value.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression_INTERP
    - match: '((:))'
      captures:
        '1': constant.other.object.key.js
        '2': punctuation.separator.key-value.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.method.begin.es
        '2': meta.brace.round.js
      set:
        - literalObject_AFTER_AE
        - method_AFTER_PARAMS
        - parameters
    - include: literalObject_AFTER_AE
  literalObject_AFTER_PROP:
    - match: '((:))(?=\s*\$\{)'
      captures:
        '1': constant.other.object.key.js
        '2': punctuation.separator.key-value.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression_INTERP
    - match: '((:))'
      captures:
        '1': constant.other.object.key.js
        '2': punctuation.separator.key-value.es
      set:
        - literalObject_AFTER_AE
        - assignmentExpression
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.method.begin.es
        '2': meta.brace.round.js
      set:
        - literalObject_AFTER_AE
        - method_AFTER_PARAMS
        - parameters
    - include: other_illegal
  literalObject_AFTER_AE:
    - match: '((,))'
      captures:
        '1': punctuation.separator.object-member.es
        '2': meta.delimiter.comma.js
      set: literalObject_OPEN
    - match: '{{PLA_anything}}'
      set: literalObject_OPEN
  computedProp_AFTER_AE:
    - match: '((\]))'
      captures:
        '1': punctuation.definition.accessor.end.es
        '2': meta.brace.square.js
      pop: true
    - include: other_illegal
  method_AFTER_NAME:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.method.begin.es
        '2': meta.brace.round.js
      set:
        - method_AFTER_PARAMS
        - parameters
    - include: other_illegal_pop
  method_AFTER_PARAMS:
    - match: ((\)))
      captures:
        '1': punctuation.definition.parameters.method.end.es
        '2': meta.brace.round.js
      set: method_BEFORE_BRACE
    - include: other_illegal
  method_BEFORE_BRACE:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.method.body.begin.es
        '2': meta.brace.curly.js
      set: method_AFTER_BRACE
    - include: other_illegal_pop
  method_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.method.body.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: useStrict
    - include: statements
  asyncMethod_AFTER_ASYNC:
    - match: '(({{identifierName}}))(?=\$\{)'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.async.es
      set: asyncMethod_AFTER_NAME_INTERP
    - match: '(({{identifierName}}))'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.async.es
      set: asyncMethod_AFTER_NAME
    - match: ''''
      scope: punctuation.definition.string.quoted.single.begin.es
      set:
        - asyncMethod_AFTER_NAME
        - stringSingle_AFTER_OPEN
    - match: '"'
      scope: punctuation.definition.string.quoted.double.begin.es
      set:
        - asyncMethod_AFTER_NAME
        - stringDouble_AFTER_OPEN
    - match: '({{decNum}})'
      scope: constant.numeric.decimal.es
      captures:
        '1': entity.name.method.es
        '2': punctuation.decimal.es
        '3': punctuation.decimal.es
        '4': punctuation.decimal.es
        '5': meta.numeric.exponent.e.es
        '6': meta.numeric.exponent.sign.es
        '7': meta.numeric.exponent.digit.es
        '8': meta.numeric.suffix.es
      set: asyncMethod_AFTER_NAME
    - match: '({{binNum}})'
      scope: constant.numeric.binary.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: asyncMethod_AFTER_NAME
    - match: '({{octNum}})'
      scope: constant.numeric.octal.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: asyncMethod_AFTER_NAME
    - match: '({{hexNum}})'
      scope: constant.numeric.hexadecimal.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: asyncMethod_AFTER_NAME
    - match: '((\[))(?=\s*\$\{)'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - asyncMethod_AFTER_NAME
        - computedProp_AFTER_AE
        - assignmentExpression_INTERP
    - match: '((\[))'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - asyncMethod_AFTER_NAME
        - computedProp_AFTER_AE
        - assignmentExpression
    - include: other_illegal_pop
  asyncMethod_AFTER_NAME:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.method.async.begin.es
        '2': meta.brace.round.js
      set:
        - asyncMethod_AFTER_PARAMS
        - parameters
    - include: other_illegal_pop
  asyncMethod_AFTER_PARAMS:
    - match: ((\)))
      captures:
        '1': punctuation.definition.parameters.method.async.end.es
        '2': meta.brace.round.js
      set: asyncMethod_BEFORE_BRACE
    - include: other_illegal
  asyncMethod_BEFORE_BRACE:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.method.async.body.begin.es
        '2': meta.brace.curly.js
      set: asyncMethod_AFTER_BRACE
    - include: other_illegal_pop
  asyncMethod_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.method.async.body.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: useStrict
    - include: statements
  accessorMethod_AFTER_GET:
    - match: '(({{identifierName}}))(?=\$\{)'
      captures:
        '1': entity.name.method.js
        '2': entity.name.accessor.get.es
      set: accessorMethod_AFTER_GET_NAME_INTERP
    - match: '(({{identifierName}}))'
      captures:
        '1': entity.name.method.js
        '2': entity.name.accessor.get.es
      set: accessorMethod_AFTER_GET_NAME
    - match: ''''
      scope: punctuation.definition.string.quoted.single.begin.es
      set:
        - accessorMethod_AFTER_GET_NAME
        - stringSingle_AFTER_OPEN
    - match: '"'
      scope: punctuation.definition.string.quoted.double.begin.es
      set:
        - accessorMethod_AFTER_GET_NAME
        - stringDouble_AFTER_OPEN
    - match: '({{decNum}})'
      scope: constant.numeric.decimal.es
      captures:
        '1': entity.name.method.es
        '2': punctuation.decimal.es
        '3': punctuation.decimal.es
        '4': punctuation.decimal.es
        '5': meta.numeric.exponent.e.es
        '6': meta.numeric.exponent.sign.es
        '7': meta.numeric.exponent.digit.es
        '8': meta.numeric.suffix.es
      set: accessorMethod_AFTER_GET_NAME
    - match: '({{binNum}})'
      scope: constant.numeric.binary.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: accessorMethod_AFTER_GET_NAME
    - match: '({{octNum}})'
      scope: constant.numeric.octal.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: accessorMethod_AFTER_GET_NAME
    - match: '({{hexNum}})'
      scope: constant.numeric.hexadecimal.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: accessorMethod_AFTER_GET_NAME
    - match: '((\[))(?=\s*\$\{)'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - accessorMethod_AFTER_GET_NAME
        - computedProp_AFTER_AE
        - assignmentExpression_INTERP
    - match: '((\[))'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - accessorMethod_AFTER_GET_NAME
        - computedProp_AFTER_AE
        - assignmentExpression
    - include: other_illegal_pop
  accessorMethod_AFTER_GET_NAME:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.accessor.begin.es
        '2': meta.brace.round.js
      set: accessorMethod_AFTER_GET_PAREN_OPEN
    - include: other_illegal_pop
  accessorMethod_AFTER_GET_PAREN_OPEN:
    - match: ((\)))
      captures:
        '1': punctuation.definition.parameters.accessor.end.es
        '2': meta.brace.round.js
      set: accessorMethod_BEFORE_BRACE
    - include: other_illegal
  accessorMethod_AFTER_SET:
    - match: '(({{identifierName}}))(?=\$\{)'
      captures:
        '1': entity.name.method.js
        '2': entity.name.accessor.set.es
      set: accessorMethod_AFTER_SET_NAME_INTERP
    - match: '(({{identifierName}}))'
      captures:
        '1': entity.name.method.js
        '2': entity.name.accessor.set.es
      set: accessorMethod_AFTER_SET_NAME
    - match: ''''
      scope: punctuation.definition.string.quoted.single.begin.es
      set:
        - accessorMethod_AFTER_SET_NAME
        - stringSingle_AFTER_OPEN
    - match: '"'
      scope: punctuation.definition.string.quoted.double.begin.es
      set:
        - accessorMethod_AFTER_SET_NAME
        - stringDouble_AFTER_OPEN
    - match: '({{decNum}})'
      scope: constant.numeric.decimal.es
      captures:
        '1': entity.name.method.es
        '2': punctuation.decimal.es
        '3': punctuation.decimal.es
        '4': punctuation.decimal.es
        '5': meta.numeric.exponent.e.es
        '6': meta.numeric.exponent.sign.es
        '7': meta.numeric.exponent.digit.es
        '8': meta.numeric.suffix.es
      set: accessorMethod_AFTER_SET_NAME
    - match: '({{binNum}})'
      scope: constant.numeric.binary.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: accessorMethod_AFTER_SET_NAME
    - match: '({{octNum}})'
      scope: constant.numeric.octal.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: accessorMethod_AFTER_SET_NAME
    - match: '({{hexNum}})'
      scope: constant.numeric.hexadecimal.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: accessorMethod_AFTER_SET_NAME
    - match: '((\[))(?=\s*\$\{)'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - accessorMethod_AFTER_SET_NAME
        - computedProp_AFTER_AE
        - assignmentExpression_INTERP
    - match: '((\[))'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - accessorMethod_AFTER_SET_NAME
        - computedProp_AFTER_AE
        - assignmentExpression
    - include: other_illegal_pop
  accessorMethod_AFTER_SET_NAME:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.accessor.begin.es
        '2': meta.brace.round.js
      set:
        - accessorMethod_AFTER_SET_PARAM
        - parameters
    - include: other_illegal_pop
  accessorMethod_AFTER_SET_PARAM:
    - match: ((\)))
      captures:
        '1': punctuation.definition.parameters.accessor.end.es
        '2': meta.brace.round.js
      set: accessorMethod_BEFORE_BRACE
    - include: other_illegal
  accessorMethod_BEFORE_BRACE:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.accessor.body.begin.es
        '2': meta.brace.curly.js
      set: accessorMethod_AFTER_BRACE
    - include: other_illegal_pop
  accessorMethod_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.accessor.body.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: useStrict
    - match: '(return){{idEnd}}'
      scope: keyword.control.flow.return.accessor.es
      push: returnStatement
    - include: statements
  generatorMethod_AFTER_ASTERISK:
    - match: '(({{identifierName}}))(?=\$\{)'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.generator.es
      set: generatorMethod_AFTER_NAME_INTERP
    - match: '(({{identifierName}}))'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.generator.es
      set: generatorMethod_AFTER_NAME
    - match: ''''
      scope: punctuation.definition.string.quoted.single.begin.es
      set:
        - generatorMethod_AFTER_NAME
        - stringSingle_AFTER_OPEN
    - match: '"'
      scope: punctuation.definition.string.quoted.double.begin.es
      set:
        - generatorMethod_AFTER_NAME
        - stringDouble_AFTER_OPEN
    - match: '({{decNum}})'
      scope: constant.numeric.decimal.es
      captures:
        '1': entity.name.method.es
        '2': punctuation.decimal.es
        '3': punctuation.decimal.es
        '4': punctuation.decimal.es
        '5': meta.numeric.exponent.e.es
        '6': meta.numeric.exponent.sign.es
        '7': meta.numeric.exponent.digit.es
        '8': meta.numeric.suffix.es
      set: generatorMethod_AFTER_NAME
    - match: '({{binNum}})'
      scope: constant.numeric.binary.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: generatorMethod_AFTER_NAME
    - match: '({{octNum}})'
      scope: constant.numeric.octal.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: generatorMethod_AFTER_NAME
    - match: '({{hexNum}})'
      scope: constant.numeric.hexadecimal.es
      captures:
        '1': entity.name.method.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: generatorMethod_AFTER_NAME
    - match: '((\[))(?=\s*\$\{)'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - generatorMethod_AFTER_NAME
        - computedProp_AFTER_AE
        - assignmentExpression_INTERP
    - match: '((\[))'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - generatorMethod_AFTER_NAME
        - computedProp_AFTER_AE
        - assignmentExpression
    - include: other_illegal_pop
  generatorMethod_AFTER_NAME:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.method.generator.begin.es
        '2': meta.brace.round.js
      set:
        - generatorMethod_AFTER_PARAMS
        - parameters
    - include: other_illegal_pop
  generatorMethod_AFTER_PARAMS:
    - match: ((\)))
      captures:
        '1': punctuation.definition.parameters.method.generator.end.es
        '2': meta.brace.round.js
      set: generatorMethod_BEFORE_BRACE
    - include: other_illegal
  generatorMethod_BEFORE_BRACE:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.method.generator.body.begin.es
        '2': meta.brace.curly.js
      set: generatorMethod_AFTER_BRACE
    - include: other_illegal_pop
  generatorMethod_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.method.generator.body.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: useStrict
    - include: statements
  constructorMethod_AFTER_CONSTRUCTOR:
    - match: ((\())
      captures:
        '1': punctuation.definition.parameters.constructor.begin.es
        '2': meta.brace.round.js
      set:
        - constructorMethod_AFTER_PARAMS
        - parameters
    - include: other_illegal_pop
  constructorMethod_AFTER_PARAMS:
    - match: ((\)))
      captures:
        '1': punctuation.definition.parameters.constructor.end.es
        '2': meta.brace.round.js
      set: constructorMethod_BEFORE_BRACE
    - include: other_illegal
  constructorMethod_BEFORE_BRACE:
    - match: '((\{))'
      captures:
        '1': punctuation.definition.constructor.body.begin.es
        '2': meta.brace.curly.js
      set: constructorMethod_AFTER_BRACE
    - include: other_illegal_pop
  constructorMethod_AFTER_BRACE:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.constructor.body.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: useStrict
    - include: statements
  bindingArray:
    - match: '((\]))'
      captures:
        '1': punctuation.definition.binding.array.end.es
        '2': meta.brace.square.js
      pop: true
    - match: '((,))'
      captures:
        '1': punctuation.separator.array-element.binding.es
        '2': meta.separator.comma.js
    - match: '\.{3}'
      scope: keyword.other.rest.es
      set: bindingArray_AFTER_ELLIPSIS
    - match: '((\[))'
      captures:
        '1': punctuation.definition.binding.array.begin.es
        '2': meta.brace.square.js
      set:
        - bindingArray_AFTER_ELEM
        - bindingArray
    - match: '((\{))'
      captures:
        '1': punctuation.definition.binding.object.begin.es
        '2': meta.brace.curly.js
      set:
        - bindingArray_AFTER_ELEM
        - bindingObject
    - match: '{{PLA_anything}}(?=\s*\$\{)'
      set:
        - bindingArray_AFTER_ELEM
        - assignmentExpression_INTERP
    - match: '{{PLA_anything}}'
      set:
        - bindingArray_AFTER_ELEM
        - assignmentExpression
  bindingArray_AFTER_ELEM:
    - match: '((\]))'
      captures:
        '1': punctuation.definition.binding.array.end.es
        '2': meta.brace.square.js
      pop: true
    - match: '((,))'
      captures:
        '1': punctuation.separator.array-element.binding.es
        '2': meta.separator.comma.js
      set: bindingArray
    - match: '=(?=\s*\$\{)'
      scope: keyword.operator.assignment.conditional.default.es
      push: assignmentExpression_INTERP
    - match: =
      scope: keyword.operator.assignment.conditional.default.es
      push: assignmentExpression
    - include: other_illegal
  bindingArray_AFTER_ELLIPSIS:
    - match: '{{allThreeIDs}}'
      captures:
        '1': variable.other.readwrite.allCap.es
        '2': variable.other.readwrite.initCap.es
        '3': variable.other.readwrite.es
      set: bindingArray_AFTER_REST_ELEM
    - match: '\]'
      scope: invalid.illegal.token.es
      pop: true
  bindingArray_AFTER_REST_ELEM:
    - match: '((\]))'
      captures:
        '1': punctuation.definition.binding.array.end.es
        '2': meta.brace.square.js
      pop: true
    - include: other_illegal
  bindingObject:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.binding.object.end.es
        '2': meta.brace.curly.js
      pop: true
    - match: '(({{identifierName}}))\s*((:))'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': entity.other.property-binding.es
        '3': constant.other.object.key.js
        '4': punctuation.separator.property-binding.es
      set: bindingObject_AFTER_PROPERTY
    - match: '{{allThreeIDs}}'
      captures:
        '1': variable.other.readwrite.allCap.es
        '2': variable.other.readwrite.initCap.es
        '3': variable.other.readwrite.es
      set: bindingObject_AFTER_ELEM
    - match: '((\[))(?=\s*\$\{)'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - bindingObject_BEFORE_COLON
        - computedProp_AFTER_AE
        - assignmentExpression_INTERP
    - match: '((\[))'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - bindingObject_BEFORE_COLON
        - computedProp_AFTER_AE
        - assignmentExpression
    - match: ''''
      scope: punctuation.definition.string.quoted.single.begin.es
      set:
        - bindingObject_BEFORE_COLON
        - stringSingle_AFTER_OPEN
    - match: '"'
      scope: punctuation.definition.string.quoted.double.begin.es
      set:
        - bindingObject_BEFORE_COLON
        - stringDouble_AFTER_OPEN
    - match: '\.{3}'
      scope: keyword.other.rest.es
      set: bindingObject_AFTER_ELLIPSIS
    - match: '({{decNum}})'
      scope: constant.numeric.decimal.es
      captures:
        '1': entity.other.property-binding.es
        '2': punctuation.decimal.es
        '3': punctuation.decimal.es
        '4': punctuation.decimal.es
        '5': meta.numeric.exponent.e.es
        '6': meta.numeric.exponent.sign.es
        '7': meta.numeric.exponent.digit.es
        '8': meta.numeric.suffix.es
      set: bindingObject_BEFORE_COLON
    - match: '({{binNum}})'
      scope: constant.numeric.binary.es
      captures:
        '1': entity.other.property-binding.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: bindingObject_BEFORE_COLON
    - match: '({{octNum}})'
      scope: constant.numeric.octal.es
      captures:
        '1': entity.other.property-binding.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: bindingObject_BEFORE_COLON
    - match: '({{hexNum}})'
      scope: constant.numeric.hexadecimal.es
      captures:
        '1': entity.other.property-binding.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: bindingObject_BEFORE_COLON
    - include: other_illegal
  bindingObject_BEFORE_COLON:
    - match: '((:))'
      captures:
        '1': constant.other.object.key.js
        '2': punctuation.separator.property-binding.es
      set: bindingObject_AFTER_PROPERTY
    - match: '\}'
      scope: invalid.illegal.token.es
      pop: true
    - include: other_illegal
  bindingObject_AFTER_PROPERTY:
    - match: '((\[))'
      captures:
        '1': punctuation.definition.binding.array.begin.es
        '2': meta.brace.square.js
      set:
        - bindingObject_AFTER_ELEM
        - bindingArray
    - match: '((\{))'
      captures:
        '1': punctuation.definition.binding.object.begin.es
        '2': meta.brace.curly.js
      set:
        - bindingObject_AFTER_ELEM
        - bindingObject
    - match: '{{PLA_anything}}(?=\s*\$\{)'
      set:
        - bindingObject_AFTER_ELEM
        - assignmentExpression_INTERP
    - match: '{{PLA_anything}}'
      set:
        - bindingObject_AFTER_ELEM
        - assignmentExpression
  bindingObject_AFTER_ELEM:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.binding.object.end.es
        '2': meta.brace.curly.js
      pop: true
    - match: '((,))'
      captures:
        '1': punctuation.separator.object-member.binding.es
        '2': meta.separator.comma.js
      set: bindingObject
    - match: '=(?=\s*\$\{)'
      scope: keyword.operator.assignment.conditional.default.es
      push: assignmentExpression_INTERP
    - match: =
      scope: keyword.operator.assignment.conditional.default.es
      push: assignmentExpression
  bindingObject_AFTER_ELLIPSIS:
    - match: '{{allThreeIDs}}'
      captures:
        '1': variable.other.readwrite.allCap.es
        '2': variable.other.readwrite.initCap.es
        '3': variable.other.readwrite.es
      set: bindingObject_AFTER_REST_ELEM
    - match: '\}'
      scope: invalid.illegal.token.es
      pop: true
    - include: other_illegal
  bindingObject_AFTER_REST_ELEM:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.binding.object.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: other_illegal
  bindingArray_PARAM:
    - match: '((\]))'
      captures:
        '1': punctuation.definition.binding.array.parameter.end.es
        '2': meta.brace.square.js
      pop: true
    - match: '((,))'
      captures:
        '1': punctuation.separator.array-element.binding.parameter.es
        '2': meta.separator.comma.js
    - match: '\.{3}'
      scope: keyword.other.rest.parameter.es
      set: bindingArray_PARAM_AFTER_ELLIPSIS
    - match: '{{identifier}}'
      scope: variable.parameter.es
      set: bindingArray_PARAM_AFTER_ELEM
    - match: '((\[))'
      captures:
        '1': punctuation.definition.binding.array.parameter.begin.es
        '2': meta.brace.square.js
      set:
        - bindingArray_PARAM_AFTER_ELEM
        - bindingArray_PARAM
    - match: '((\{))'
      captures:
        '1': punctuation.definition.binding.object.parameter.begin.es
        '2': meta.brace.curly.js
      set:
        - bindingArray_PARAM_AFTER_ELEM
        - bindingObject_PARAM
    - include: other_illegal
  bindingArray_PARAM_AFTER_ELEM:
    - match: '((\]))'
      captures:
        '1': punctuation.definition.binding.array.parameter.end.es
        '2': meta.brace.square.js
      pop: true
    - match: '((,))'
      captures:
        '1': punctuation.separator.array-element.binding.parameter.es
        '2': meta.separator.comma.js
      set: bindingArray_PARAM
    - match: '=(?=\s*\$\{)'
      scope: keyword.operator.assignment.conditional.default.es
      push: assignmentExpression_INTERP
    - match: =
      scope: keyword.operator.assignment.conditional.default.es
      push: assignmentExpression
    - include: other_illegal
  bindingArray_PARAM_AFTER_ELLIPSIS:
    - match: '{{identifier}}'
      scope: variable.parameter.es
      set: bindingArray_PARAM_AFTER_REST_ELEM
    - match: '\]'
      scope: invalid.illegal.token.es
      pop: true
  bindingArray_PARAM_AFTER_REST_ELEM:
    - match: '((\]))'
      captures:
        '1': punctuation.definition.binding.array.parameter.end.es
        '2': meta.brace.square.js
      pop: true
    - include: other_illegal
  bindingObject_PARAM:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.binding.object.parameter.end.es
        '2': meta.brace.curly.js
      pop: true
    - match: '(({{identifierName}}))\s*((:))'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': entity.other.property-binding.parameter.es
        '3': constant.other.object.key.js
        '4': punctuation.separator.property-binding.parameter.es
      set: bindingObject_PARAM_AFTER_PROPERTY
    - match: '{{identifier}}'
      scope: variable.parameter.es
      set: bindingObject_PARAM_AFTER_ELEM
    - match: '((\[))(?=\s*\$\{)'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - bindingObject_PARAM_BEFORE_COLON
        - computedProp_AFTER_AE
        - assignmentExpression_INTERP
    - match: '((\[))'
      captures:
        '1': punctuation.definition.accessor.begin.es
        '2': meta.brace.square.js
      set:
        - bindingObject_PARAM_BEFORE_COLON
        - computedProp_AFTER_AE
        - assignmentExpression
    - match: ''''
      scope: punctuation.definition.string.quoted.single.parameter.begin.es
      set:
        - bindingObject_PARAM_BEFORE_COLON
        - stringSingle_AFTER_OPEN
    - match: '"'
      scope: punctuation.definition.string.quoted.double.parameter.begin.es
      set:
        - bindingObject_PARAM_BEFORE_COLON
        - stringDouble_AFTER_OPEN
    - match: '\.{3}'
      scope: keyword.other.rest.parameter.es
      set: bindingObject_PARAM_AFTER_ELLIPSIS
    - match: '({{decNum}})'
      scope: constant.numeric.decimal.es
      captures:
        '1': entity.other.property-binding.parameter.es
        '2': punctuation.decimal.es
        '3': punctuation.decimal.es
        '4': punctuation.decimal.es
        '5': meta.numeric.exponent.e.es
        '6': meta.numeric.exponent.sign.es
        '7': meta.numeric.exponent.digit.es
        '8': meta.numeric.suffix.es
      set: bindingObject_PARAM_BEFORE_COLON
    - match: '({{binNum}})'
      scope: constant.numeric.binary.es
      captures:
        '1': entity.other.property-binding.parameter.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: bindingObject_PARAM_BEFORE_COLON
    - match: '({{octNum}})'
      scope: constant.numeric.octal.es
      captures:
        '1': entity.other.property-binding.parameter.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: bindingObject_PARAM_BEFORE_COLON
    - match: '({{hexNum}})'
      scope: constant.numeric.hexadecimal.es
      captures:
        '1': entity.other.property-binding.parameter.es
        '2': meta.numeric.prefix.es
        '3': meta.numeric.suffix.es
      set: bindingObject_PARAM_BEFORE_COLON
    - include: other_illegal
  bindingObject_PARAM_BEFORE_COLON:
    - match: '((:))'
      captures:
        '1': constant.other.object.key.js
        '2': punctuation.separator.property-binding.parameter.es
      set: bindingObject_PARAM_AFTER_PROPERTY
    - match: '\}'
      scope: invalid.illegal.token.es
      pop: true
    - include: other_illegal
  bindingObject_PARAM_AFTER_PROPERTY:
    - match: '{{identifier}}'
      scope: variable.parameter.es
      set: bindingObject_PARAM_AFTER_ELEM
    - match: '((\[))'
      captures:
        '1': punctuation.definition.binding.array.parameter.begin.es
        '2': meta.brace.square.js
      set:
        - bindingObject_PARAM_AFTER_ELEM
        - bindingArray_PARAM
    - match: '((\{))'
      captures:
        '1': punctuation.definition.binding.object.parameter.begin.es
        '2': meta.brace.curly.js
      set:
        - bindingObject_PARAM_AFTER_ELEM
        - bindingObject_PARAM
    - match: '{{MAT_word_or_any_one_char}}'
      scope: invalid.illegal.token.es
      set: bindingObject_PARAM_AFTER_ELEM
  bindingObject_PARAM_AFTER_ELEM:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.binding.object.parameter.end.es
        '2': meta.brace.curly.js
      pop: true
    - match: '((,))'
      captures:
        '1': punctuation.separator.object-member.binding.parameter.es
        '2': meta.delimiter.comma.js
      set: bindingObject_PARAM
    - match: '=(?=\s*\$\{)'
      scope: keyword.operator.assignment.conditional.default.es
      push: assignmentExpression_INTERP
    - match: =
      scope: keyword.operator.assignment.conditional.default.es
      push: assignmentExpression
  bindingObject_PARAM_AFTER_ELLIPSIS:
    - match: '{{identifier}}'
      scope: variable.parameter.es
      set: bindingObject_PARAM_AFTER_REST_ELEM
    - match: '\}'
      scope: invalid.illegal.token.es
      pop: true
    - include: other_illegal
  bindingObject_PARAM_AFTER_REST_ELEM:
    - match: '((\}))'
      captures:
        '1': punctuation.definition.binding.object.parameter.end.es
        '2': meta.brace.curly.js
      pop: true
    - include: other_illegal
  arguments:
    - match: ((\)))
      captures:
        '1': punctuation.definition.arguments.end.es
        '2': meta.brace.round.js
      pop: true
    - match: ','
      scope: invalid.illegal.token.es
    - match: '\.{3}(?=\s*\$\{)'
      scope: keyword.operator.spread.es
      set:
        - arguments_AFTER_AE
        - assignmentExpression_INTERP
    - match: '\.{3}'
      scope: keyword.operator.spread.es
      set:
        - arguments_AFTER_AE
        - assignmentExpression
    - match: '{{PLA_anything}}(?=\s*\$\{)'
      set:
        - arguments_AFTER_AE
        - assignmentExpression_INTERP
    - match: '{{PLA_anything}}'
      set:
        - arguments_AFTER_AE
        - assignmentExpression
    - include: other_illegal
  arguments_AFTER_AE:
    - match: ((\)))
      captures:
        '1': punctuation.definition.arguments.end.es
        '2': meta.brace.round.js
      pop: true
    - match: ','
      scope: punctuation.separator.argument.es
      set: arguments
    - include: other_illegal
  parameters:
    - match: '((\[))'
      captures:
        '1': punctuation.definition.binding.array.parameter.begin.es
        '2': meta.brace.square.js
      set:
        - parameters_AFTER_PARAM
        - bindingArray_PARAM
    - match: '((\{))'
      captures:
        '1': punctuation.definition.binding.object.parameter.begin.es
        '2': meta.brace.curly.js
      set:
        - parameters_AFTER_PARAM
        - bindingObject_PARAM
    - match: '{{identifier}}'
      scope: variable.parameter.es
      set: parameters_AFTER_PARAM
    - match: '\.{3}(?=\s*\))'
      scope: invalid.illegal.token.es
      pop: true
    - match: '\.{3}'
      scope: keyword.other.rest.parameter.es
      set: parameters_AFTER_ELLIPSIS
    - include: parameters_AFTER_REST_PARAM
  parameters_AFTER_PARAM:
    - match: ','
      scope: punctuation.separator.parameter.es
      set: parameters
    - match: '=(?=\s*\$\{)'
      scope: keyword.operator.assignment.conditional.default.es
      push: assignmentExpression_INTERP
    - match: =
      scope: keyword.operator.assignment.conditional.default.es
      push: assignmentExpression
    - include: parameters_AFTER_REST_PARAM
  parameters_AFTER_ELLIPSIS:
    - match: '((\[))'
      captures:
        '1': punctuation.definition.binding.array.parameter.begin.es
        '2': meta.brace.square.js
      set:
        - parameters_AFTER_REST_PARAM
        - bindingArray_PARAM
    - match: '((\{))'
      captures:
        '1': punctuation.definition.binding.object.parameter.begin.es
        '2': meta.brace.curly.js
      set:
        - parameters_AFTER_REST_PARAM
        - bindingObject_PARAM
    - match: '{{identifier}}'
      scope: variable.parameter.rest.es
      set: parameters_AFTER_REST_PARAM
    - include: parameters_AFTER_REST_PARAM
  parameters_AFTER_REST_PARAM:
    - match: (?=\))
      pop: true
    - include: other_illegal
  regex_AFTER_OPEN:
    - meta_scope: string.regexp.es
    - meta_include_prototype: false
    - include: regex_COMMON_NOT_IN_CLASS_SET
  regex_ANY_CHILD_CONTEXT:
    - match: '(?=[\n\/])'
      pop: true
  regex_COMMON_NOT_IN_CLASS_SET:
    - include: regex_COMMON
    - match: \|
      scope: keyword.operator.or.regexp
    - match: '[\?\*\+]|\{\d+\s*(?:,\s*\d*\s*)?\}'
      scope: keyword.operator.quantifier.regexp
    - match: '\['
      scope: punctuation.definition.character-class.begin.regexp
      push: regexp_AFTER_BRACKET
    - match: \(\?<?!
      scope: punctuation.definition.assertion.negative.begin.regexp
      push: regex_AFTER_ASSERTION_NEGATIVE_OPEN
    - match: \(\?<?=
      scope: punctuation.definition.assertion.positive.begin.regexp
      push: regex_AFTER_ASSERTION_POSITIVE_OPEN
    - match: '(\(\?<)({{identifierName}})(>)'
      captures:
        '1': punctuation.definition.group.capturing.begin.regexp
        '2': variable.other.named-capture.regexp
        '3': punctuation.definition.group.capturing.begin.regexp
      push: regex_AFTER_CAPTURE_OPEN
    - match: '\(\?:'
      scope: punctuation.definition.group.non-capturing.begin.regexp
      push: regex_AFTER_NON_CAPTURE_OPEN
    - match: \(
      scope: punctuation.definition.group.capturing.begin.regexp
      push: regex_AFTER_CAPTURE_OPEN
  regex_COMMON:
    - match: \/
      scope: punctuation.definition.string.regexp.end.es
      set: regex_AFTER_PATTERN
    - match: \n
      scope: invalid.illegal.newline.es
      pop: true
    - match: '\\[Bb]|[\$\^]'
      scope: keyword.control.anchor.regexp
    - match: '\.|\\[DdSsWw]'
      scope: constant.other.character-class.predefined.regexp
    - match: '\\[Pp]\{'
      scope: punctuation.definition.character-property.regexp.begin.es
      push:
        - - meta_scope: meta.character-property.regexp
          - match: '([A-Za-z_]+)(=)([A-Za-z\d]+)'
            captures:
              '1': constant.other.character-class.unicode-property-name.regexp
              '2': punctuation.separator.character-property-name-value.regexp
              '3': constant.other.character-class.unicode-property-value.regexp
            set:
              - - meta_scope: meta.character-property.regexp
                - match: '\}'
                  scope: punctuation.definition.character-property.regexp.end.es
                  pop: true
                - include: other_illegal_pop
          - match: '[A-Za-z_\d]+'
            scope: constant.other.character-class.unicode-property-value.regexp
            set:
              - - meta_scope: meta.character-property.regexp
                - match: '\}'
                  scope: punctuation.definition.character-property.regexp.end.es
                  pop: true
                - include: other_illegal_pop
          - match: '\}'
            scope: invalid.illegal.token
            pop: true
          - include: other_illegal_pop
    - match: '\\k<({{identifierName}})>'
      scope: keyword.other.back-reference.regexp
      captures:
        '1': variable.other.named-capture.regexp
    - match: '\\[1-9]\d*'
      scope: keyword.other.back-reference.regexp
    - match: '\\(c[A-Za-z]|[tnvfr])'
      scope: constant.character.escape.control-char.regexp
    - match: \\x\h\h
      scope: constant.character.escape.hexadecimal.regexp
    - match: \\0(?!\d)
      scope: constant.character.escape.null.regexp
    - match: '{{unicodeEscape}}'
      scope: constant.character.escape.unicode.regexp
    - match: \\\/
      scope: constant.character.escape.regexp
    - match: \\.
      scope: constant.character.escape.pointless.regexp
  regexp_AFTER_BRACKET:
    - meta_scope: constant.other.character-class.set.regexp
    - meta_include_prototype: false
    - match: '(?<=\[)\^'
      scope: keyword.operator.negation.regexp
    - match: '(?<!\[\^|\[)-(?!\])'
      scope: punctuation.definition.character-class.dash.regexp
    - match: '\]'
      scope: punctuation.definition.character-class.end.regexp
      pop: true
    - match: '[/$.^]'
    - include: regex_ANY_CHILD_CONTEXT
    - include: regex_COMMON
  regex_AFTER_ASSERTION_NEGATIVE_OPEN:
    - meta_scope: meta.group.assertion.negative.regexp
    - meta_include_prototype: false
    - match: \)
      scope: punctuation.definition.assertion.negative.end.regexp
      pop: true
    - include: regex_ANY_CHILD_CONTEXT
    - include: regex_COMMON_NOT_IN_CLASS_SET
  regex_AFTER_ASSERTION_POSITIVE_OPEN:
    - meta_scope: meta.group.assertion.positive.regexp
    - meta_include_prototype: false
    - match: \)
      scope: punctuation.definition.assertion.positive.end.regexp
      pop: true
    - include: regex_ANY_CHILD_CONTEXT
    - include: regex_COMMON_NOT_IN_CLASS_SET
  regex_AFTER_NON_CAPTURE_OPEN:
    - meta_scope: meta.group.non-capturing.regexp
    - meta_include_prototype: false
    - match: \)
      scope: punctuation.definition.group.non-capturing.end.regexp
      pop: true
    - include: regex_ANY_CHILD_CONTEXT
    - include: regex_COMMON_NOT_IN_CLASS_SET
  regex_AFTER_CAPTURE_OPEN:
    - meta_scope: meta.group.capturing.regexp
    - meta_include_prototype: false
    - match: \)
      scope: punctuation.definition.group.capturing.end.regexp
      pop: true
    - include: regex_ANY_CHILD_CONTEXT
    - include: regex_COMMON_NOT_IN_CLASS_SET
  regex_AFTER_PATTERN:
    - meta_include_prototype: false
    - match: |-
        (?x) ((
          ([gimsyu])
          (?:
            (?!\3) ([gimsyu])
            (?:
              (?!\3|\4) ([gimsyu])
              (?:
                (?!\3|\4|\5) ([gimsyu])
                (?:
                  (?!\3|\4|\5|\6) ([gimsyu])
                  (
                    (?!\3|\4|\5|\6\7) ([gimsyu])
                  )?
                )?
              )?
            )?
          )?
          ))
          {{idEnd}}
      captures:
        '1': string.regexp.js keyword.other.js
        '2': string.regexp.flags.es
      set: else_pop
    - match: \w+
      scope: invalid.illegal.token
      pop: true
    - include: else_pop
  stringDouble_AFTER_OPEN:
    - meta_scope: string.quoted.double.es
    - meta_include_prototype: false
    - match: \\"
      scope: constant.character.escape.es
    - match: '"'
      scope: punctuation.definition.string.quoted.double.end.es
      pop: true
    - include: string_COMMON_QUOTED
  stringSingle_AFTER_OPEN:
    - meta_scope: string.quoted.single.es
    - meta_include_prototype: false
    - match: \\'
      scope: constant.character.escape.es
    - match: ''''
      scope: punctuation.definition.string.quoted.single.end.es
      pop: true
    - include: string_COMMON_QUOTED
  templateString_AFTER_OPEN:
    - meta_scope: string.interpolated.es
    - meta_include_prototype: false
    - match: '\\\\\\[`\$\{]'
      scope: constant.character.escape.es
    - match: \\\n
      scope: constant.character.escape.pointless.es
    - include: string_COMMON_ESCAPES
    - match: \\`
      scope: punctuation.definition.string.interpolated.end.es
      pop: true
    - match: '((\\\$\{))'
      captures:
        '1': entity.quasi.element.js punctuation.quasi.element.begin.js
        '2': punctuation.definition.string.interpolated.element.begin.es
      set:
        - templateString_ELEMENT
        - expression
  templateString_ELEMENT:
    - match: '((\}))'
      captures:
        '1': entity.quasi.element.js punctuation.quasi.element.end.js
        '2': punctuation.definition.string.interpolated.element.end.es
      set: templateString_AFTER_OPEN
    - include: other_illegal_pop
  string_COMMON_QUOTED:
    - include: string_COMMON_ESCAPES
    - match: \\\\\n
      scope: constant.character.escape.newline.es
    - match: \\\n
      scope: invalid.illegal.newline.es
      pop: true
  string_COMMON_ESCAPES:
    - match: '\\\\[\\bfnrtv]'
      scope: constant.character.escape.es
    - match: '\\{{unicodeEscape}}'
      scope: constant.character.escape.unicode.es
    - match: \\\\x\h\h
      scope: constant.character.escape.hexadecimal.es
    - match: '\\\\(?:[1-7][0-7]{0,2}|[0-7]{2,3})'
      scope: invalid.illegal.octal-escape.es
    - match: \\\\0
      scope: constant.character.escape.null.es
    - match: \\\\.
      scope: constant.character.escape.pointless.es
  useStrict:
    - match: ((')use strict('))
      scope: string.quoted.single.es
      captures:
        '1': meta.directive.use-strict.es
        '2': punctuation.definition.string.quoted.single.begin.es
        '3': punctuation.definition.string.quoted.single.end.es
    - match: ((")use strict("))
      scope: string.quoted.double.es
      captures:
        '1': meta.directive.use-strict.es
        '2': punctuation.definition.string.quoted.double.begin.es
        '3': punctuation.definition.string.quoted.double.end.es
  method_AFTER_NAME_INTERP:
    - match: '(({{identifierPart}}))(?=\$\{)'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.es
    - match: '(({{identifierName}}))'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.es
      set: method_AFTER_NAME
    - include: method_AFTER_NAME
  moduleDeclaration_AFTER_EXPORT_BINDING_SPECIFIER_INTERP:
    - match: '(({{identifierPart}}))(?=\$\{)'
      scope: entity.name.module.export.es
    - match: '(({{identifierName}}))'
      scope: entity.name.module.export.es
      set: moduleDeclaration_AFTER_EXPORT_BINDING_SPECIFIER
    - include: moduleDeclaration_AFTER_EXPORT_BINDING_SPECIFIER
  ae_AFTER_THING_INTERP:
    - match: '(({{identifierPart}}))(?=\$\{)'
      scope: variable.language.private.es
    - match: '(({{identifierName}}))'
      scope: variable.language.private.es
      set: ae_AFTER_THING
    - include: ae_AFTER_THING
  ae_NO_IN_AFTER_THING_INTERP:
    - match: '(({{identifierPart}}))(?=\$\{)'
      scope: variable.language.private.es
    - match: '(({{identifierName}}))'
      scope: variable.language.private.es
      set: ae_NO_IN_AFTER_THING
    - include: ae_NO_IN_AFTER_THING
  literalObject_AFTER_SHORTHAND_INTERP:
    - match: '(({{identifierPart}}))(?=\$\{)'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': variable.other.readwrite.property.object-literal.es
    - match: '(({{identifierName}}))'
      captures:
        '1': constant.other.object.key.js string.unquoted.label.js
        '2': variable.other.readwrite.property.object-literal.es
      set: literalObject_AFTER_SHORTHAND
    - include: literalObject_AFTER_SHORTHAND
  asyncMethod_AFTER_NAME_INTERP:
    - match: '(({{identifierPart}}))(?=\$\{)'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.async.es
    - match: '(({{identifierName}}))'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.async.es
      set: asyncMethod_AFTER_NAME
    - include: asyncMethod_AFTER_NAME
  accessorMethod_AFTER_GET_NAME_INTERP:
    - match: '(({{identifierPart}}))(?=\$\{)'
      captures:
        '1': storage.type.accessor.js
        '2': storage.modifier.accessor.get.es
    - match: '(({{identifierPart}})){{idEnd}}'
      captures:
        '1': storage.type.accessor.js
        '2': storage.modifier.accessor.get.es
      set: accessorMethod_AFTER_GET_NAME
    - include: accessorMethod_AFTER_GET_NAME
  accessorMethod_AFTER_SET_NAME_INTERP:
    - match: '(({{identifierPart}}))(?=\$\{)'
      captures:
        '1': storage.type.accessor.js
        '2': storage.modifier.accessor.set.es
    - match: '(({{identifierPart}})){{idEnd}}'
      captures:
        '1': storage.type.accessor.js
        '2': storage.modifier.accessor.set.es
      set: accessorMethod_AFTER_SET_NAME
    - include: accessorMethod_AFTER_SET_NAME
  generatorMethod_AFTER_NAME_INTERP:
    - match: '(({{identifierPart}}))(?=\$\{)'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.generator.es
    - match: '(({{identifierName}}))'
      captures:
        '1': entity.name.method.js
        '2': entity.name.method.generator.es
      set: generatorMethod_AFTER_NAME
    - include: generatorMethod_AFTER_NAME
  constLetVarDeclaration_AFTER_BINDING_INTERP:
    - match: '(({{allThreeIDs}}))(?=\s*\$\{)'
      captures:
        '1': variable.other.readwrite.allCap.es
        '2': variable.other.readwrite.initCap.es
        '3': variable.other.readwrite.es
    - include: constLetVarDeclaration_AFTER_BINDING
  assignmentExpression_INTERP:
    - include: ae_AFTER_IDENTIFIER
  syntax_OPEN:
    - include: block_comment
  syntax_NO_IN_OPEN:
    - include: block_comment
