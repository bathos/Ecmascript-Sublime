<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>scope</key>
    <string>(source.regexp, source.yaml.sublime.syntax.nested.es meta.expect-regexp) - comment</string>
    <key>settings</key>
    <dict>
        <key>comment</key>
        <string>
            Indent any unclosed groups
            (open paren that doesn't have a corresponding closing paren on the same line).

            Unindent when a closing paren is the first non-whitespace character on a line.

            Also apply to the `expect-regexp` meta scope,
            because otherwise a line like `- match: (?=\))` in a `.sublime-syntax` file
            would not have these rules applied to it
            because the `source.regexp` scope (correctly) doesn't cover the newline.

            Parens inside comments (whether YAML or Regex) are ignored.
        </string>
        <key>indentParens</key>
        <false/>
        <key>increaseIndentPattern</key>
        <string><![CDATA[(?x)
            # define sub-expressions
            (?<not_paren>
                [^\\()]++              # anything that isn't a slash or a paren
            |   \\(?>                  # this is the "known_char_escape" variable from the syntax definition
                    [tnrfae]
                |   [0-7]{3}
                |   x \h\h
                |   x \{ \h{1,8} \}
                |   c \d+
                |   C- \d+
                |   M- \d+
                |   M-\\C- \d+
                )
            |   \\.                    # a single escape character
            ){0}
            (?<group>
                \(                     # an open paren
                (                      # followed by either
                    \g<not_paren>      # ... anything that's not a group-related paren
                |   \g<group> # ... or a parens group (recursive)
                )*+
                \)                     # a closing paren
            ){0}
            (?<balanced_pattern>
                (
                    \g<not_paren>      # anything that's not a group-related paren
                |   \g<group>          # or a parens group (recursive)
                )*+
            ){0}

            # now the actual match
            ^                      # start at the beginning of the line
            \g<balanced_pattern>   # the longest sequence of groups and non-group characters
            \(                     # followed by an unbalanced open paren
        ]]></string>
        <key>decreaseIndentPattern</key>
        <string><![CDATA[(?x)
            # decrease indentation (while typing)
            # if a closing paren is the first non-whitespace character on a line
            ^
            \s*
            \)
        ]]></string>
    </dict>
</dict>
</plist>
